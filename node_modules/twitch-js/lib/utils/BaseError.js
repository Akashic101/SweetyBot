"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var BaseError = /** @class */ (function (_super) {
    __extends(BaseError, _super);
    function BaseError(message) {
        var _this = _super.call(this, message) || this;
        _this.timestamp = new Date();
        /**
         * Set the prototype explicitly.
         * @see https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work
         */
        Object.setPrototypeOf(_this, BaseError.prototype);
        if (Error.captureStackTrace) {
            Error.captureStackTrace(_this, BaseError);
        }
        _this.message = "[TwitchJS] " + message;
        return _this;
    }
    return BaseError;
}(Error));
exports.default = BaseError;
//# sourceMappingURL=BaseError.js.map