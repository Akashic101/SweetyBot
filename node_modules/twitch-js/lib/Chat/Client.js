"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var eventemitter3_1 = __importDefault(require("eventemitter3"));
var get_1 = __importDefault(require("lodash/get"));
var qs_1 = require("qs");
var ws_1 = __importDefault(require("ws"));
var twitch_1 = require("../twitch");
var Queue_1 = __importDefault(require("../Queue"));
var logger_1 = __importDefault(require("../utils/logger"));
var constants = __importStar(require("./constants"));
var parsers_1 = __importDefault(require("./utils/parsers"));
var validators = __importStar(require("./utils/validators"));
var utils = __importStar(require("./utils"));
var Errors = __importStar(require("./Errors"));
var priority = constants.CLIENT_PRIORITY;
var Client = /** @class */ (function (_super) {
    __extends(Client, _super);
    function Client(maybeOptions) {
        var _this = _super.call(this) || this;
        _this.isReady = function () { return get_1.default(_this, '_ws.readyState') === 1; };
        /**
         * Send message to Twitch
         */
        _this.send = function (message, _a) {
            var _b = _a === void 0 ? {} : _a, _c = _b.priority, priority = _c === void 0 ? 1 : _c, _d = _b.isModerator, isModerator = _d === void 0 ? false : _d;
            return __awaiter(_this, void 0, void 0, function () {
                var fn, queue, error_1;
                return __generator(this, function (_e) {
                    switch (_e.label) {
                        case 0:
                            _e.trys.push([0, 2, , 3]);
                            fn = this._ws.send.bind(this._ws, message);
                            queue = isModerator ? this._moderatorQueue : this._queue;
                            return [4 /*yield*/, queue.push({ fn: fn, priority: priority })];
                        case 1:
                            _e.sent();
                            this._log.debug('<', message);
                            return [3 /*break*/, 3];
                        case 2:
                            error_1 = _e.sent();
                            this._log.error('<', message);
                            return [3 /*break*/, 3];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        _this.disconnect = function () {
            _this._handleKeepAliveReset();
            _this._ws.close();
        };
        // Validate options.
        _this._options = validators.clientOptions(maybeOptions);
        var _a = _this._options, ssl = _a.ssl, server = _a.server, port = _a.port, log = _a.log;
        _this._log = logger_1.default(__assign({ name: 'Chat/Client' }, log));
        // Instantiate WebSocket.
        var protocol = ssl ? 'wss' : 'ws';
        _this._ws = new ws_1.default(protocol + "://" + server + ":" + port);
        _this._ws.onopen = _this._handleOpen.bind(_this);
        _this._ws.onmessage = _this._handleMessage.bind(_this);
        _this._ws.onerror = _this._handleError.bind(_this);
        _this._ws.onclose = _this._handleClose.bind(_this);
        // Instantiate Queue.
        _this._queue = _this._createQueue(_this._options);
        _this._moderatorQueue = _this._options.isVerified
            ? _this._queue
            : _this._createQueue({ isModerator: true });
        return _this;
    }
    Client.prototype._createQueue = function (_a) {
        var _b = _a.isModerator, isModerator = _b === void 0 ? false : _b, _c = _a.isVerified, isVerified = _c === void 0 ? false : _c, _d = _a.isKnown, isKnown = _d === void 0 ? false : _d;
        if (isModerator) {
            return new Queue_1.default({ intervalCap: constants.RATE_LIMIT_MODERATOR });
        }
        else if (isVerified) {
            return new Queue_1.default({ intervalCap: constants.RATE_LIMIT_VERIFIED_BOT });
        }
        else if (isKnown) {
            return new Queue_1.default({ intervalCap: constants.RATE_LIMIT_KNOWN_BOT });
        }
        return new Queue_1.default();
    };
    Client.prototype._isUserAnonymous = function () {
        return utils.isUserAnonymous(get_1.default(this, '_options.username'));
    };
    Client.prototype._handleOpen = function () {
        // Register for Twitch-specific capabilities.
        this.send("CAP REQ :" + Object.values(twitch_1.Capabilities).join(' '), { priority: priority });
        // Authenticate.
        var _a = this._options, token = _a.token, username = _a.username;
        this.send("PASS " + token, { priority: priority });
        this.send("NICK " + username, { priority: priority });
    };
    Client.prototype._handleMessage = function (messageEvent) {
        var _this = this;
        var rawMessage = messageEvent.data.toString();
        try {
            this._handleKeepAlive();
            var messages = parsers_1.default(rawMessage, this._options.username);
            messages.forEach(function (message) {
                var event = message.command || '';
                _this._log.debug('> %s %s', event, JSON.stringify(__assign(__assign({}, message), { _raw: undefined })));
                // Handle authentication failure.
                if (utils.isAuthenticationFailedMessage(message)) {
                    _this.emit(twitch_1.ChatEvents.AUTHENTICATION_FAILED, __assign(__assign({}, message), { event: twitch_1.ChatEvents.AUTHENTICATION_FAILED }));
                    _this.disconnect();
                }
                else {
                    // Handle PING/PONG.
                    if (message.command === twitch_1.Commands.PING) {
                        _this.send('PONG :tmi.twitch.tv', { priority: priority });
                    }
                    // Handle successful connections.
                    if (_this._isUserAnonymous()) {
                        if (message.command === twitch_1.Commands.WELCOME) {
                            _this.emit(twitch_1.ChatEvents.CONNECTED, __assign(__assign({}, message), { event: twitch_1.ChatEvents.CONNECTED }));
                        }
                    }
                    else {
                        if (message.command === twitch_1.Commands.GLOBAL_USER_STATE) {
                            _this.emit(twitch_1.ChatEvents.CONNECTED, __assign(__assign({}, message), { event: twitch_1.ChatEvents.CONNECTED }));
                        }
                    }
                    // Handle RECONNECT.
                    if (message.command === twitch_1.Commands.RECONNECT) {
                        _this.emit(twitch_1.ChatEvents.RECONNECT, __assign(__assign({}, message), { event: twitch_1.ChatEvents.RECONNECT }));
                    }
                }
                // Emit all messages.
                _this.emit(twitch_1.ChatEvents.ALL, message);
            });
        }
        catch (error) {
            var title = 'Parsing error encountered';
            var query = qs_1.stringify({ title: title, body: rawMessage });
            this._log.error('Parsing error encountered. Please create an issue: %s', "https://github.com/twitch-js/twitch-js/issues/new?" + query, error);
            var errorMessage = new Errors.ParseError(error, rawMessage);
            this.emit(errorMessage.command, errorMessage);
            this.emit(twitch_1.ChatEvents.ALL, errorMessage);
            throw errorMessage;
        }
        finally {
            var message = {
                _raw: rawMessage,
                timestamp: new Date(),
            };
            this.emit(twitch_1.ChatEvents.RAW, message);
        }
    };
    Client.prototype._handleError = function (messageEvent) {
        var message = {
            timestamp: new Date(),
            event: twitch_1.ChatEvents.ERROR_ENCOUNTERED,
            messageEvent: messageEvent,
        };
        this.emit(twitch_1.ChatEvents.ERROR_ENCOUNTERED, message);
        this.emit(twitch_1.ChatEvents.ALL, message);
    };
    Client.prototype._handleClose = function (messageEvent) {
        var message = {
            timestamp: new Date(),
            event: twitch_1.ChatEvents.DISCONNECTED,
            messageEvent: messageEvent,
        };
        this.emit(twitch_1.ChatEvents.DISCONNECTED, message);
        this.emit(twitch_1.ChatEvents.ALL, message);
    };
    Client.prototype._handleKeepAlive = function () {
        var _this = this;
        this._handleKeepAliveReset();
        if (this.isReady()) {
            this._pingTimeoutId = setTimeout(function () { return _this.send(twitch_1.Commands.PING, { priority: priority }); }, constants.KEEP_ALIVE_PING_TIMEOUT);
        }
        this._reconnectTimeoutId = setTimeout(function () { return _this.emit(twitch_1.ChatEvents.RECONNECT, {}); }, constants.KEEP_ALIVE_RECONNECT_TIMEOUT);
    };
    Client.prototype._handleKeepAliveReset = function () {
        clearTimeout(this._pingTimeoutId);
        clearTimeout(this._reconnectTimeoutId);
        this._pingTimeoutId = undefined;
        this._reconnectTimeoutId = undefined;
    };
    return Client;
}(eventemitter3_1.default));
exports.default = Client;
//# sourceMappingURL=Client.js.map