{"version":3,"file":"index.js","sources":["../node_modules/tslib/tslib.es6.js","../src/twitch.ts","../src/utils/logger/index.ts","../src/Chat/types.ts","../src/utils/index.ts","../src/Chat/constants.ts","../src/Chat/utils/index.ts","../src/Queue/index.ts","../src/Chat/utils/parsers/helpers.ts","../src/Chat/utils/parsers/tags.ts","../src/Chat/utils/parsers/index.ts","../src/Chat/utils/sanitizers.ts","../src/Chat/utils/validators.ts","../src/utils/BaseError.ts","../src/Chat/Errors.ts","../src/Chat/Client.ts","../src/Chat/utils/commands.ts","../src/Chat/index.ts","../src/Api/types.ts","../src/utils/fetch/Errors.ts","../src/utils/fetch/parser.ts","../src/Api/index.ts","../src/Api/utils/validators.ts","../src/utils/fetch/index.ts","../src/index.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","type DistributeKeys<T> = { [P in keyof T]: P }\n\nexport enum ApiVersions {\n  Helix = 'helix',\n  Kraken = 'kraken',\n}\n\n/**\n * Root URL response\n * @see https://dev.twitch.tv/docs/v5#root-url\n */\nexport type ApiRootResponse = {\n  token: {\n    authorization: {\n      createdAt: Date\n      updatedAt: Date\n      scopes: string[]\n    }\n    clientId: string\n    userId: string\n    userName: string\n    valid: boolean\n  }\n}\n\n/**\n * @see https://dev.twitch.tv/docs/irc/guide#twitch-irc-capabilities\n */\nexport enum Capabilities {\n  'tags' = 'twitch.tv/tags',\n  'commands' = 'twitch.tv/commands',\n  'membership' = 'twitch.tv/membership',\n}\n\n/**\n * @see https://dev.twitch.tv/docs/irc/membership\n */\nexport enum MembershipCommands {\n  JOIN = 'JOIN',\n  MODE = 'MODE',\n  PART = 'PART',\n  NAMES = '353',\n  NAMES_END = '366',\n}\n\n/**\n * @see https://dev.twitch.tv/docs/irc/tags\n */\nexport enum TagCommands {\n  CLEAR_CHAT = 'CLEARCHAT',\n  GLOBAL_USER_STATE = 'GLOBALUSERSTATE',\n  PRIVATE_MESSAGE = 'PRIVMSG',\n  ROOM_STATE = 'ROOMSTATE',\n  USER_NOTICE = 'USERNOTICE',\n  USER_STATE = 'USERSTATE',\n}\n\nexport enum OtherCommands {\n  WELCOME = '001',\n  PING = 'PING',\n  PONG = 'PONG',\n  WHISPER = 'PRIVMSG #jtv',\n}\n\n/**\n * @see https://dev.twitch.tv/docs/irc/commands\n */\nexport enum BaseCommands {\n  CLEAR_CHAT = 'CLEARCHAT',\n  HOST_TARGET = 'HOSTTARGET',\n  NOTICE = 'NOTICE',\n  RECONNECT = 'RECONNECT',\n  ROOM_STATE = 'ROOMSTATE',\n  USER_NOTICE = 'USERNOTICE',\n  USER_STATE = 'USERSTATE',\n}\n\nexport enum Commands {\n  WELCOME = '001',\n\n  PING = 'PING',\n  PONG = 'PONG',\n  RECONNECT = 'RECONNECT',\n\n  WHISPER = 'PRIVMSG #jtv',\n\n  JOIN = 'JOIN',\n  MODE = 'MODE',\n  PART = 'PART',\n  NAMES = '353',\n  NAMES_END = '366',\n\n  CLEAR_CHAT = 'CLEARCHAT',\n  GLOBAL_USER_STATE = 'GLOBALUSERSTATE',\n  HOST_TARGET = 'HOSTTARGET',\n  NOTICE = 'NOTICE',\n  PRIVATE_MESSAGE = 'PRIVMSG',\n  ROOM_STATE = 'ROOMSTATE',\n  USER_NOTICE = 'USERNOTICE',\n  USER_STATE = 'USERSTATE',\n}\n\nexport enum ChatEvents {\n  RAW = 'RAW',\n\n  ALL = '*',\n  CONNECTED = 'CONNECTED',\n  DISCONNECTED = 'DISCONNECTED',\n  RECONNECT = 'RECONNECT',\n  AUTHENTICATION_FAILED = 'AUTHENTICATION_FAILED',\n  ERROR_ENCOUNTERED = 'ERROR_ENCOUNTERED',\n  PARSE_ERROR_ENCOUNTERED = 'PARSE_ERROR_ENCOUNTERED',\n\n  ANON_GIFT_PAID_UPGRADE = 'ANON_GIFT_PAID_UPGRADE',\n  GIFT_PAID_UPGRADE = 'GIFT_PAID_UPGRADE',\n  RAID = 'RAID',\n  RESUBSCRIPTION = 'RESUBSCRIPTION',\n  RITUAL = 'RITUAL',\n  SUBSCRIPTION = 'SUBSCRIPTION',\n  SUBSCRIPTION_GIFT = 'SUBSCRIPTION_GIFT',\n  SUBSCRIPTION_GIFT_COMMUNITY = 'SUBSCRIPTION_GIFT_COMMUNITY',\n\n  ROOM_MODS = 'ROOM_MODS',\n  MOD_GAINED = 'MOD_GAINED',\n  MOD_LOST = 'MOD_LOST',\n\n  USER_BANNED = 'USER_BANNED',\n\n  CHEER = 'CHEER',\n\n  HOST_ON = 'HOST_ON',\n  HOST_OFF = 'HOST_OFF',\n\n  HOSTED = 'HOSTED',\n  HOSTED_WITHOUT_VIEWERS = 'HOSTED/WITHOUT_VIEWERS',\n  HOSTED_WITH_VIEWERS = 'HOSTED/WITH_VIEWERS',\n  HOSTED_AUTO = 'HOSTED/AUTO',\n}\n\n/**\n * @see https://help.twitch.tv/customer/en/portal/articles/659095-chat-moderation-commands\n */\nexport enum ChatCommands {\n  BAN = 'ban',\n  CLEAR = 'clear',\n  COLOR = 'color',\n  COMMERCIAL = 'commercial',\n  // DISCONNECTED = 'disconnect',\n  EMOTE_ONLY = 'emoteonly',\n  EMOTE_ONLY_OFF = 'emoteonlyoff',\n  FOLLOWERS_ONLY = 'followers',\n  FOLLOWERS_ONLY_OFF = 'followersoff',\n  HELP = 'help',\n  HOST = 'host',\n  MARKER = 'marker',\n  ME = 'me',\n  MOD = 'mod',\n  MODS = 'mods',\n  // PART = 'part',\n  R9K = 'r9kbeta',\n  R9K_OFF = 'r9kbetaoff',\n  RAID = 'raid',\n  SLOW = 'slow',\n  SLOW_OFF = 'slowoff',\n  SUBSCRIBERS = 'subscribers',\n  SUBSCRIBERS_OFF = 'subscribersoff',\n  TIMEOUT = 'timeout',\n  UNBAN = 'unban',\n  UNHOST = 'unhost',\n  UNMOD = 'unmod',\n  UNRAID = 'unraid',\n  // WHISPER = 'w',\n}\n\nexport enum KnownNoticeMessageIds {\n  ALREADY_BANNED = 'already_banned',\n  ALREADY_EMOTE_ONLY_OFF = 'already_emote_only_off',\n  ALREADY_EMOTE_ONLY_ON = 'already_emote_only_on',\n  ALREADY_R9K_OFF = 'already_r9k_off',\n  ALREADY_R9K_ON = 'already_r9k_on',\n  ALREADY_SUBS_OFF = 'already_subs_off',\n  ALREADY_SUBS_ON = 'already_subs_on',\n  BAD_HOST_HOSTING = 'bad_host_hosting',\n  BAD_MOD_MOD = 'bad_mod_mod',\n  BAN_SUCCESS = 'ban_success',\n  BAD_UNBAN_NO_BAN = 'bad_unban_no_ban',\n  COLOR_CHANGED = 'color_changed',\n  CMDS_AVAILABLE = 'cmds_available',\n  COMMERCIAL_SUCCESS = 'commercial_success',\n  EMOTE_ONLY_OFF = 'emote_only_off',\n  EMOTE_ONLY_ON = 'emote_only_on',\n  FOLLOWERS_OFF = 'followers_off',\n  FOLLOWERS_ON = 'followers_on',\n  FOLLOWERS_ON_ZERO = 'followers_on_zero',\n  HOST_OFF = 'host_off',\n  HOST_ON = 'host_on',\n  HOSTS_REMAINING = 'hosts_remaining',\n  MSG_CHANNEL_SUSPENDED = 'msg_channel_suspended',\n  MOD_SUCCESS = 'mod_success',\n  R9K_OFF = 'r9k_off',\n  R9K_ON = 'r9k_on',\n  ROOM_MODS = 'room_mods',\n  SLOW_OFF = 'slow_off',\n  SLOW_ON = 'slow_on',\n  SUBS_OFF = 'subs_off',\n  SUBS_ON = 'subs_on',\n  TIMEOUT_SUCCESS = 'timeout_success',\n  UNBAN_SUCCESS = 'unban_success',\n  UNRAID_SUCCESS = 'unraid_success',\n  UNRECOGNIZED_CMD = 'unrecognized_cmd',\n}\n\nexport const NoticeEvents = Object.keys(KnownNoticeMessageIds).reduce(\n  (events, event) => ({\n    ...events,\n    [event]: event,\n    [`${Commands.NOTICE}/${event}`]: event,\n  }),\n  {} as DistributeKeys<typeof KnownNoticeMessageIds>,\n)\nexport type NoticeEvents = keyof typeof NoticeEvents\n\nexport enum PrivateMessageEvents {\n  CHEER = 'CHEER',\n  HOSTED_WITHOUT_VIEWERS = 'HOSTED_WITHOUT_VIEWERS',\n  HOSTED_WITH_VIEWERS = 'HOSTED_WITH_VIEWERS',\n  HOSTED_AUTO = 'HOSTED_AUTO',\n}\n\n/**\n * @see https://dev.twitch.tv/docs/irc/tags#usernotice-twitch-tags\n */\nexport enum KnownUserNoticeMessageIds {\n  ANON_GIFT_PAID_UPGRADE = 'anongiftpaidupgrade',\n  GIFT_PAID_UPGRADE = 'giftpaidupgrade',\n  RAID = 'raid',\n  RESUBSCRIPTION = 'resub',\n  RITUAL = 'ritual',\n  SUBSCRIPTION = 'sub',\n  SUBSCRIPTION_GIFT = 'subgift',\n  SUBSCRIPTION_GIFT_COMMUNITY = 'submysterygift',\n}\n\nexport const UserNoticeEvents = Object.keys(KnownUserNoticeMessageIds).reduce(\n  (events, event) => ({\n    ...events,\n    [event]: event,\n    [`${Commands.USER_NOTICE}/${event}`]: event,\n  }),\n  {} as DistributeKeys<typeof KnownUserNoticeMessageIds>,\n)\nexport type UserNoticeEvents = keyof typeof UserNoticeEvents\n\nexport const Events = {\n  ...MembershipCommands,\n  ...TagCommands,\n  ...OtherCommands,\n  ...BaseCommands,\n  ...ChatEvents,\n  ...NoticeEvents,\n  ...PrivateMessageEvents,\n  ...UserNoticeEvents,\n}\n\nexport type Events = keyof DistributeKeys<typeof Events>\n\nexport enum BooleanBadges {\n  'admin',\n  'broadcaster',\n  'globalMod',\n  'moderator',\n  'partner',\n  'premium',\n  'staff',\n  'subGifter',\n  'turbo',\n  'vip',\n}\n\nexport enum NumberBadges {\n  'bits',\n  'bitsLeader',\n  'subscriber',\n}\n\nexport type Badges =\n  | {\n      // Booleans\n      admin: boolean\n      broadcaster: boolean\n      globalMod: boolean\n      moderator: boolean\n      partner: boolean\n      premium: boolean\n      staff: boolean\n      subGifter: boolean\n      turbo: boolean\n      vip: boolean\n      // Numbers\n      bits: number\n      bitsLeader: number\n      subscriber: number\n    }\n  | {\n      [key: string]: string\n    }\n\nexport type EmoteTag = {\n  id: string\n  start: number\n  end: number\n}\n\n/**\n * Tags\n */\n\nexport interface BaseTags {\n  [key: string]: any\n}\n\n/**\n * CLEARCHAT tags\n * @see https://dev.twitch.tv/docs/irc/tags#clearchat-twitch-tags\n */\nexport interface ClearChatTags extends BaseTags {\n  banReason: string\n  banDuration: number\n}\n\n/**\n * GLOBALUSERSTATE tags\n * @see https://dev.twitch.tv/docs/irc/tags#globaluserstate-twitch-tags\n */\nexport interface GlobalUserStateTags extends BaseTags {\n  emoteSets: string[]\n  userType: string\n  username: string\n}\n\n/**\n * ROOMSTATE Tag\n * @see https://dev.twitch.tv/docs/irc/tags#roomstate-twitch-tags\n */\nexport interface RoomStateTags extends BaseTags {\n  followersOnly?: number | boolean\n  broadcasterLang?: string\n  slow?: number\n  emoteOnly?: boolean\n  r9k?: boolean\n  subsOnly?: boolean\n}\n\nexport interface NoticeTags extends BaseTags {\n  msgId: KnownNoticeMessageIds\n}\n\n/**\n * USERSTATE tags\n * @see https://dev.twitch.tv/docs/irc/tags#userstate-twitch-tags\n */\nexport interface UserStateTags extends BaseTags {\n  badges: Partial<Badges>\n  color: string\n  displayName: string\n  emotes: EmoteTag[]\n  emoteSets: string[]\n  mod?: string\n  subscriber?: string\n  turbo?: string\n  userType: string\n  username: string\n}\n\n/**\n * PRIVMSG tags\n * @see https://dev.twitch.tv/docs/irc/tags#privmsg-twitch-tags\n */\nexport interface PrivateMessageTags extends UserStateTags {\n  bits?: string\n}\n\n/**\n * USERNOTICE tags\n * @see https://dev.twitch.tv/docs/irc/tags#usernotice-twitch-tags\n */\nexport interface UserNoticeTags extends UserStateTags {\n  id: string\n  login: string\n  msgId: KnownUserNoticeMessageIds\n  roomId: string\n  systemMsg: string\n  tmiSentTs: string\n}\n\nexport type Tags =\n  | ClearChatTags\n  | GlobalUserStateTags\n  | RoomStateTags\n  | UserStateTags\n  | PrivateMessageTags\n  | NoticeTags\n  | UserNoticeTags\n\n/**\n * Messages\n */\n\n/* Base message parsed from Twitch */\nexport interface Message {\n  _raw: string\n  timestamp: Date\n  channel: string\n  username: string\n  command: string\n  event: string\n  isSelf: boolean\n  message: string\n  tags: { [key: string]: any }\n  parameters?: { [key: string]: string | number | boolean }\n}\n\nexport interface BaseMessage extends Message {\n  _raw: string\n  timestamp: Date\n  channel: string\n  username: string\n  command: Commands\n  event: Commands | Events\n  isSelf: boolean\n  message: string\n  tags: { [key: string]: any }\n}\n\n/**\n * Join a channel.\n * @see https://dev.twitch.tv/docs/irc/membership/#join-twitch-membership\n */\nexport interface JoinMessage extends Omit<BaseMessage, 'message'> {\n  command: Commands.JOIN\n  event: Commands.JOIN\n}\n\n/**\n * Depart from a channel.\n * @see https://dev.twitch.tv/docs/irc/membership/#part-twitch-membership\n */\nexport interface PartMessage extends Omit<BaseMessage, 'message'> {\n  command: Commands.PART\n  event: Commands.PART\n}\n\n/**\n * Gain/lose moderator (operator) status in a channel.\n * @see https://dev.twitch.tv/docs/irc/membership/#mode-twitch-membership\n */\nexport interface ModeModGainedMessage extends BaseMessage {\n  command: Commands.MODE\n  event: ChatEvents.MOD_GAINED\n  message: '+o'\n  isModerator: true\n}\n\nexport interface ModeModLostMessage extends BaseMessage {\n  command: Commands.MODE\n  event: ChatEvents.MOD_LOST\n  message: '-o'\n  isModerator: false\n}\n\nexport type ModeMessages = ModeModGainedMessage | ModeModLostMessage\n\n/**\n * List current chatters in a channel.\n * @see https://dev.twitch.tv/docs/irc/membership/#names-twitch-membership\n */\nexport interface NamesMessage extends Omit<BaseMessage, 'message'> {\n  command: Commands.NAMES\n  event: Commands.NAMES\n  usernames: string[]\n}\n\n/**\n * End of list current chatters in a channel.\n * @see https://dev.twitch.tv/docs/irc/membership/#names-twitch-membership\n */\nexport interface NamesEndMessage extends Omit<BaseMessage, 'message'> {\n  command: Commands.NAMES_END\n  event: Commands.NAMES_END\n}\n\n/**\n * GLOBALUSERSTATE message\n * @see https://dev.twitch.tv/docs/irc/tags#globaluserstate-twitch-tags\n */\nexport interface GlobalUserStateMessage extends BaseMessage {\n  command: Commands.GLOBAL_USER_STATE\n  event: Commands.GLOBAL_USER_STATE\n  tags: GlobalUserStateTags\n}\n\n/**\n * Temporary or permanent ban on a channel.\n * @see https://dev.twitch.tv/docs/irc/commands/#clearchat-twitch-commands\n * @see https://dev.twitch.tv/docs/irc/tags/#clearchat-twitch-tags\n */\nexport interface ClearChatUserBannedMessage\n  extends Omit<BaseMessage, 'message'> {\n  command: Commands.CLEAR_CHAT\n  event: ChatEvents.USER_BANNED\n  tags: ClearChatTags\n}\n\n/**\n * All chat is cleared (deleted).\n * @see https://dev.twitch.tv/docs/irc/commands/#clearchat-twitch-commands\n * @see https://dev.twitch.tv/docs/irc/tags/#clearchat-twitch-tags\n */\nexport interface ClearChatMessage\n  extends Omit<BaseMessage, 'tags' | 'username' | 'message'> {\n  command: Commands.CLEAR_CHAT\n  event: Commands.CLEAR_CHAT\n}\n\nexport type ClearChatMessages = ClearChatMessage | ClearChatUserBannedMessage\n\n/**\n * Host starts or stops a message.\n * @see https://dev.twitch.tv/docs/irc/commands/#hosttarget-twitch-commands\n */\nexport interface HostTargetMessage extends BaseMessage {\n  command: Commands.HOST_TARGET\n  event: ChatEvents.HOST_ON | ChatEvents.HOST_OFF\n  numberOfViewers?: number\n}\n\n/**\n * When a user joins a channel or a room setting is changed.\n * @see https://dev.twitch.tv/docs/irc/tags#roomstate-twitch-tags\n */\nexport interface RoomStateMessage extends BaseMessage {\n  command: Commands.ROOM_STATE\n  event: Commands.ROOM_STATE\n  tags: RoomStateTags\n}\n\n/**\n * Base NOTICE message\n */\nexport interface NoticeMessage extends Omit<BaseMessage, 'event'> {\n  command: Commands.NOTICE\n  event: Exclude<NoticeEvents, typeof NoticeEvents.ROOM_MODS>\n  tags: NoticeTags\n  username: 'tmi.twitch.tv' | string\n}\n\n/**\n * NOTICE/ROOM_MODS message\n */\nexport interface NoticeRoomModsMessage extends Omit<NoticeMessage, 'event'> {\n  event: typeof NoticeEvents.ROOM_MODS\n  /** The moderators of this channel. */\n  mods: string[]\n}\n\n/**\n * NOTICE message\n * @see https://dev.twitch.tv/docs/irc/commands/#msg-id-tags-for-the-notice-commands-capability\n */\nexport type NoticeMessages = NoticeMessage | NoticeRoomModsMessage\n\n/**\n * USERSTATE message\n */\nexport interface UserStateMessage extends BaseMessage {\n  command: Commands.USER_STATE\n  event: Commands.USER_STATE\n  tags: UserStateTags\n}\n\n/**\n * PRIVMSG messages\n */\n\ninterface BasePrivateMessage\n  extends Omit<UserStateMessage, 'command' | 'event'> {\n  command: Commands.PRIVATE_MESSAGE\n}\n\n/**\n * When a user joins a channel or sends a PRIVMSG to a channel.\n */\nexport interface PrivateMessage extends BasePrivateMessage {\n  event: Commands.PRIVATE_MESSAGE\n}\n\nexport interface PrivateMessageWithBits extends BasePrivateMessage {\n  event: ChatEvents.CHEER\n  bits: number\n}\n\ninterface BaseHostingPrivateMessage extends Omit<BasePrivateMessage, 'tags'> {}\n\n/**\n * When a user hosts your channel while connected as broadcaster.\n */\nexport interface HostingPrivateMessage extends BaseHostingPrivateMessage {\n  event: ChatEvents.HOSTED_WITHOUT_VIEWERS\n  tags: { displayName: string }\n}\n\nexport interface HostingWithViewersPrivateMessage\n  extends BaseHostingPrivateMessage {\n  event: ChatEvents.HOSTED_WITH_VIEWERS\n  numberOfViewers: number\n  tags: { displayName: string }\n}\n\nexport interface HostingAutoPrivateMessage extends BaseHostingPrivateMessage {\n  event: ChatEvents.HOSTED_AUTO\n  tags: { displayName: string }\n  numberOfViewers: number\n}\n\nexport type PrivateMessages =\n  | PrivateMessage\n  | PrivateMessageWithBits\n  | HostingPrivateMessage\n  | HostingWithViewersPrivateMessage\n  | HostingAutoPrivateMessage\n\nexport interface MessageParameters {\n  [key: string]: string | number | boolean | Date\n}\n\nexport interface AnonymousGiftPaidUpgradeParameters extends MessageParameters {}\n\nexport interface GiftPaidUpgradeParameters extends MessageParameters {\n  promoGiftTotal: number\n  promoName: string\n  senderLogin: string\n  senderName: string\n}\n\nexport interface RaidParameters extends MessageParameters {\n  displayName: string\n  login: string\n  viewerCount: number\n}\n\nexport interface ResubscriptionParameters extends MessageParameters {\n  months: number\n  subPlan: string\n  subPlanName: string\n}\n\nexport interface RitualParameters extends MessageParameters {\n  ritualName: string\n}\n\nexport interface SubscriptionGiftCommunityParameters extends MessageParameters {\n  massGiftCount: number\n  senderCount: number\n  subPlan: number\n}\n\nexport interface SubscriptionGiftParameters extends MessageParameters {\n  months: number\n  subPlan: string\n  subPlanName: string\n  recipientDisplayName: string\n  recipientId: string\n  recipientName: string\n}\n\nexport interface SubscriptionParameters extends MessageParameters {\n  months: 1\n  subPlan: string\n  subPlanName: string\n}\n\nexport type UserNoticeMessageParameters =\n  | AnonymousGiftPaidUpgradeParameters\n  | GiftPaidUpgradeParameters\n  | RaidParameters\n  | ResubscriptionParameters\n  | RitualParameters\n  | SubscriptionGiftCommunityParameters\n  | SubscriptionGiftParameters\n  | SubscriptionParameters\n\nexport interface UserNoticeMessage\n  extends Omit<BaseMessage, 'event' | 'parameters'> {\n  command: Commands.USER_NOTICE\n  event: UserNoticeEvents\n  tags: UserNoticeTags\n  parameters: MessageParameters\n  systemMessage: string\n}\n\n/**\n * On anonymous gifted subscription paid upgrade to a channel.\n */\nexport interface UserNoticeAnonymousGiftPaidUpgradeMessage\n  extends UserNoticeMessage {\n  command: Commands.USER_NOTICE\n  event: typeof UserNoticeEvents.ANON_GIFT_PAID_UPGRADE\n  parameters: AnonymousGiftPaidUpgradeParameters\n}\n\n/**\n * On gifted subscription paid upgrade to a channel.\n */\nexport interface UserNoticeGiftPaidUpgradeMessage\n  extends Omit<UserNoticeMessage, 'parameters'> {\n  event: typeof UserNoticeEvents.GIFT_PAID_UPGRADE\n  parameters: {\n    promoGiftTotal: number\n    promoName: string\n    senderLogin: string\n    senderName: string\n  }\n}\n\n/**\n * On channel raid.\n */\nexport interface UserNoticeRaidMessage\n  extends Omit<UserNoticeMessage, 'parameters'> {\n  event: typeof UserNoticeEvents.RAID\n  parameters: {\n    displayName: string\n    login: string\n    viewerCount: number\n  }\n}\n\n/**\n * On resubscription (subsequent months) to a channel.\n */\nexport interface UserNoticeResubscriptionMessage\n  extends Omit<UserNoticeMessage, 'parameters'> {\n  event: typeof UserNoticeEvents.RESUBSCRIPTION\n  parameters: {\n    months: number\n    subPlan: string\n    subPlanName: string\n  }\n}\n\n/**\n * On channel ritual.\n */\nexport interface UserNoticeRitualMessage\n  extends Omit<UserNoticeMessage, 'parameters'> {\n  event: typeof UserNoticeEvents.RITUAL\n  parameters: {\n    ritualName: string\n  }\n}\n\n/**\n * On subscription gift to a channel community.\n */\nexport interface UserNoticeSubscriptionGiftCommunityMessage\n  extends Omit<UserNoticeMessage, 'parameters'> {\n  event: typeof UserNoticeEvents.SUBSCRIPTION_GIFT_COMMUNITY\n  parameters: {\n    massGiftCount: number\n    senderCount: number\n    subPlan: number\n  }\n}\n\n/**\n * On subscription gift to a channel.\n */\nexport interface UserNoticeSubscriptionGiftMessage\n  extends Omit<UserNoticeMessage, 'parameters'> {\n  event: typeof UserNoticeEvents.SUBSCRIPTION_GIFT\n  parameters: {\n    months: number\n    subPlan: string\n    subPlanName: string\n    recipientDisplayName: string\n    recipientId: string\n    recipientName: string\n  }\n}\n\n/**\n * On subscription (first month) to a channel.\n */\nexport interface UserNoticeSubscriptionMessage\n  extends Omit<UserNoticeMessage, 'event' | 'parameters'> {\n  event: typeof UserNoticeEvents.SUBSCRIPTION\n  parameters: {\n    months: 1\n    subPlan: string\n    subPlanName: string\n  }\n}\n\nexport type UserNoticeMessages =\n  | UserNoticeAnonymousGiftPaidUpgradeMessage\n  | UserNoticeGiftPaidUpgradeMessage\n  | UserNoticeRaidMessage\n  | UserNoticeResubscriptionMessage\n  | UserNoticeRitualMessage\n  | UserNoticeSubscriptionGiftCommunityMessage\n  | UserNoticeSubscriptionGiftMessage\n  | UserNoticeSubscriptionMessage\n\nexport type Messages =\n  | JoinMessage\n  | PartMessage\n  | ModeMessages\n  | NamesMessage\n  | NamesEndMessage\n  | GlobalUserStateMessage\n  | ClearChatMessages\n  | HostTargetMessage\n  | RoomStateMessage\n  | NoticeMessages\n  | UserStateMessage\n  | PrivateMessages\n  | UserNoticeMessages\n","import pino, { LoggerOptions as PinoLoggerOptions } from 'pino'\n\nexport type LoggerOptions = PinoLoggerOptions\n\nconst createLogger = (options: LoggerOptions = {}) => {\n  const { name, ...other } = options\n\n  const scope = ['TwitchJS'].concat(name || []).join('/')\n\n  const logger = pino({\n    name: scope,\n    prettyPrint: true,\n    level: 'info',\n    ...other,\n  })\n\n  const profile = (startMessage?: string) => {\n    const now = Date.now()\n\n    if (startMessage) {\n      logger.info(startMessage)\n    }\n\n    return {\n      done: (endMessage: string, error?: any) => {\n        const elapsed = Date.now() - now\n        const message = `${endMessage} (${elapsed}ms)`\n\n        if (error) {\n          logger.error(message, error)\n        } else {\n          logger.info(message)\n        }\n      },\n    }\n  }\n\n  // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n  // @ts-ignore\n  logger.profile = profile\n\n  return logger as pino.Logger & { profile: typeof profile }\n}\n\nexport type Logger = ReturnType<typeof createLogger>\n\nexport default createLogger\n","import {\n  ClearChatMessages,\n  Events,\n  GlobalUserStateMessage,\n  HostingAutoPrivateMessage,\n  HostingPrivateMessage,\n  HostingWithViewersPrivateMessage,\n  HostTargetMessage,\n  JoinMessage,\n  Message,\n  Messages,\n  ModeMessages,\n  NamesEndMessage,\n  NamesMessage,\n  NoticeMessage,\n  NoticeMessages,\n  NoticeRoomModsMessage,\n  PartMessage,\n  PrivateMessages,\n  PrivateMessageWithBits,\n  RoomStateMessage,\n  RoomStateTags,\n  UserNoticeAnonymousGiftPaidUpgradeMessage,\n  UserNoticeGiftPaidUpgradeMessage,\n  UserNoticeMessages,\n  UserNoticeRaidMessage,\n  UserNoticeResubscriptionMessage,\n  UserNoticeRitualMessage,\n  UserNoticeSubscriptionGiftCommunityMessage,\n  UserNoticeSubscriptionGiftMessage,\n  UserNoticeSubscriptionMessage,\n  UserStateMessage,\n  UserStateTags,\n} from '../twitch'\n\nimport { LoggerOptions } from '../utils/logger'\n\ntype BaseChatOptions = {\n  username?: string\n  /**\n   * OAuth token\n   * @see https://twitchtokengenerator.com/ to generate a token\n   */\n  token?: string\n  /**\n   * Bot is known\n   * @see https://dev.twitch.tv/docs/irc/guide/#known-and-verified-bots\n   */\n  isKnown?: boolean\n  /**\n   * Bot is verified\n   * @see https://dev.twitch.tv/docs/irc/guide/#known-and-verified-bots\n   */\n  isVerified?: boolean\n  connectionTimeout?: number\n  joinTimeout?: number\n  log?: LoggerOptions\n  onAuthenticationFailure?: () => Promise<string>\n}\n\nexport type ChatOptions = BaseChatOptions & ClientOptions\n\nexport type ClientOptions = {\n  username?: string\n  token?: string\n  isKnown?: boolean\n  isVerified?: boolean\n  server?: string\n  port?: number\n  ssl?: boolean\n  log?: LoggerOptions\n}\n\nexport enum ChatReadyStates {\n  'NOT_READY',\n  'CONNECTING',\n  'RECONNECTING',\n  'CONNECTED',\n  'DISCONNECTING',\n  'DISCONNECTED',\n}\n\nexport type ChannelState = {\n  userState: UserStateTags\n  roomState: RoomStateTags\n}\n\nexport type ChannelStates = Record<string, ChannelState>\n\nexport enum NoticeCompounds {\n  ALREADY_BANNED = 'NOTICE/ALREADY_BANNED',\n  ALREADY_EMOTE_ONLY_OFF = 'NOTICE/ALREADY_EMOTE_ONLY_OFF',\n  ALREADY_EMOTE_ONLY_ON = 'NOTICE/ALREADY_EMOTE_ONLY_ON',\n  ALREADY_R9K_OFF = 'NOTICE/ALREADY_R9K_OFF',\n  ALREADY_R9K_ON = 'NOTICE/ALREADY_R9K_ON',\n  ALREADY_SUBS_OFF = 'NOTICE/ALREADY_SUBS_OFF',\n  ALREADY_SUBS_ON = 'NOTICE/ALREADY_SUBS_ON',\n  BAD_HOST_HOSTING = 'NOTICE/BAD_HOST_HOSTING',\n  BAD_MOD_MOD = 'NOTICE/BAD_MOD_MOD',\n  BAN_SUCCESS = 'NOTICE/BAN_SUCCESS',\n  BAD_UNBAN_NO_BAN = 'NOTICE/BAD_UNBAN_NO_BAN',\n  COLOR_CHANGED = 'NOTICE/COLOR_CHANGED',\n  CMDS_AVAILABLE = 'NOTICE/CMDS_AVAILABLE',\n  COMMERCIAL_SUCCESS = 'NOTICE/COMMERCIAL_SUCCESS',\n  EMOTE_ONLY_OFF = 'NOTICE/EMOTE_ONLY_OFF',\n  EMOTE_ONLY_ON = 'NOTICE/EMOTE_ONLY_ON',\n  FOLLOWERS_OFF = 'NOTICE/FOLLOWERS_OFF',\n  FOLLOWERS_ON = 'NOTICE/FOLLOWERS_ON',\n  FOLLOWERS_ON_ZERO = 'NOTICE/FOLLOWERS_ON_ZERO',\n  HOST_OFF = 'NOTICE/HOST_OFF',\n  HOST_ON = 'NOTICE/HOST_ON',\n  HOSTS_REMAINING = 'NOTICE/HOSTS_REMAINING',\n  MSG_CHANNEL_SUSPENDED = 'NOTICE/MSG_CHANNEL_SUSPENDED',\n  MOD_SUCCESS = 'NOTICE/MOD_SUCCESS',\n  R9K_OFF = 'NOTICE/R9K_OFF',\n  R9K_ON = 'NOTICE/R9K_ON',\n  ROOM_MODS = 'NOTICE/ROOM_MODS',\n  SLOW_OFF = 'NOTICE/SLOW_OFF',\n  SLOW_ON = 'NOTICE/SLOW_ON',\n  SUBS_OFF = 'NOTICE/SUBS_OFF',\n  SUBS_ON = 'NOTICE/SUBS_ON',\n  TIMEOUT_SUCCESS = 'NOTICE/TIMEOUT_SUCCESS',\n  UNBAN_SUCCESS = 'NOTICE/UNBAN_SUCCESS',\n  UNRAID_SUCCESS = 'NOTICE/UNRAID_SUCCESS',\n  UNRECOGNIZED_CMD = 'NOTICE/UNRECOGNIZED_CMD',\n}\n\nexport enum PrivateMessageCompounds {\n  CHEER = 'PRIVMSG/CHEER',\n  HOSTED_WITHOUT_VIEWERS = 'PRIVMSG/HOSTED_WITHOUT_VIEWERS',\n  HOSTED_WITH_VIEWERS = 'PRIVMSG/HOSTED_WITH_VIEWERS',\n  HOSTED_AUTO = 'PRIVMSG/HOSTED_AUTO',\n}\n\nexport enum UserNoticeCompounds {\n  ANON_GIFT_PAID_UPGRADE = 'USERNOTICE/ANON_GIFT_PAID_UPGRADE',\n  GIFT_PAID_UPGRADE = 'USERNOTICE/GIFT_PAID_UPGRADE',\n  RAID = 'USERNOTICE/RAID',\n  RESUBSCRIPTION = 'USERNOTICE/RESUBSCRIPTION',\n  RITUAL = 'USERNOTICE/RITUAL',\n  SUBSCRIPTION = 'USERNOTICE/SUBSCRIPTION',\n  SUBSCRIPTION_GIFT = 'USERNOTICE/SUBSCRIPTION_GIFT',\n  SUBSCRIPTION_GIFT_COMMUNITY = 'USERNOTICE/SUBSCRIPTION_GIFT_COMMUNITY',\n}\n\nexport type EventTypes = {\n  [Events.RAW]: [string]\n  [Events.ALL]: [Messages]\n  [Events.GLOBAL_USER_STATE]: [GlobalUserStateMessage]\n  [Events.JOIN]: [JoinMessage]\n  [Events.PART]: [PartMessage]\n  [Events.ROOM_STATE]: [RoomStateMessage]\n  [Events.USER_STATE]: [UserStateMessage]\n  [Events.CLEAR_CHAT]: [ClearChatMessages]\n  [Events.HOST_TARGET]: [HostTargetMessage]\n  [Events.MODE]: [ModeMessages]\n  [Events.NAMES]: [NamesMessage]\n  [Events.NAMES_END]: [NamesEndMessage]\n\n  /**\n   * NOTICE messages\n   */\n\n  [Events.NOTICE]: [NoticeMessages]\n\n  [Events.ALREADY_BANNED]: [NoticeMessage]\n  [Events.ALREADY_EMOTE_ONLY_OFF]: [NoticeMessage]\n  [Events.ALREADY_EMOTE_ONLY_ON]: [NoticeMessage]\n  [Events.ALREADY_R9K_OFF]: [NoticeMessage]\n  [Events.ALREADY_R9K_ON]: [NoticeMessage]\n  [Events.ALREADY_SUBS_OFF]: [NoticeMessage]\n  [Events.ALREADY_SUBS_ON]: [NoticeMessage]\n  [Events.BAD_HOST_HOSTING]: [NoticeMessage]\n  [Events.BAD_MOD_MOD]: [NoticeMessage]\n  [Events.BAN_SUCCESS]: [NoticeMessage]\n  [Events.BAD_UNBAN_NO_BAN]: [NoticeMessage]\n  [Events.COLOR_CHANGED]: [NoticeMessage]\n  [Events.CMDS_AVAILABLE]: [NoticeMessage]\n  [Events.COMMERCIAL_SUCCESS]: [NoticeMessage]\n  [Events.EMOTE_ONLY_OFF]: [NoticeMessage]\n  [Events.EMOTE_ONLY_ON]: [NoticeMessage]\n  [Events.FOLLOWERS_OFF]: [NoticeMessage]\n  [Events.FOLLOWERS_ON]: [NoticeMessage]\n  [Events.FOLLOWERS_ON_ZERO]: [NoticeMessage]\n  [Events.HOST_OFF]: [NoticeMessage]\n  [Events.HOST_ON]: [NoticeMessage]\n  [Events.HOSTS_REMAINING]: [NoticeMessage]\n  [Events.MSG_CHANNEL_SUSPENDED]: [NoticeMessage]\n  [Events.MOD_SUCCESS]: [NoticeMessage]\n  [Events.R9K_OFF]: [NoticeMessage]\n  [Events.R9K_ON]: [NoticeMessage]\n  [Events.ROOM_MODS]: [NoticeRoomModsMessage]\n  [Events.SLOW_OFF]: [NoticeMessage]\n  [Events.SLOW_ON]: [NoticeMessage]\n  [Events.SUBS_OFF]: [NoticeMessage]\n  [Events.SUBS_ON]: [NoticeMessage]\n  [Events.TIMEOUT_SUCCESS]: [NoticeMessage]\n  [Events.UNBAN_SUCCESS]: [NoticeMessage]\n  [Events.UNRAID_SUCCESS]: [NoticeMessage]\n  [Events.UNRECOGNIZED_CMD]: [NoticeMessage]\n\n  [NoticeCompounds.ALREADY_BANNED]: [NoticeMessage]\n  [NoticeCompounds.ALREADY_EMOTE_ONLY_OFF]: [NoticeMessage]\n  [NoticeCompounds.ALREADY_EMOTE_ONLY_ON]: [NoticeMessage]\n  [NoticeCompounds.ALREADY_R9K_OFF]: [NoticeMessage]\n  [NoticeCompounds.ALREADY_R9K_ON]: [NoticeMessage]\n  [NoticeCompounds.ALREADY_SUBS_OFF]: [NoticeMessage]\n  [NoticeCompounds.ALREADY_SUBS_ON]: [NoticeMessage]\n  [NoticeCompounds.BAD_HOST_HOSTING]: [NoticeMessage]\n  [NoticeCompounds.BAD_MOD_MOD]: [NoticeMessage]\n  [NoticeCompounds.BAN_SUCCESS]: [NoticeMessage]\n  [NoticeCompounds.BAD_UNBAN_NO_BAN]: [NoticeMessage]\n  [NoticeCompounds.COLOR_CHANGED]: [NoticeMessage]\n  [NoticeCompounds.CMDS_AVAILABLE]: [NoticeMessage]\n  [NoticeCompounds.COMMERCIAL_SUCCESS]: [NoticeMessage]\n  [NoticeCompounds.EMOTE_ONLY_OFF]: [NoticeMessage]\n  [NoticeCompounds.EMOTE_ONLY_ON]: [NoticeMessage]\n  [NoticeCompounds.FOLLOWERS_OFF]: [NoticeMessage]\n  [NoticeCompounds.FOLLOWERS_ON]: [NoticeMessage]\n  [NoticeCompounds.FOLLOWERS_ON_ZERO]: [NoticeMessage]\n  [NoticeCompounds.HOST_OFF]: [NoticeMessage]\n  [NoticeCompounds.HOST_ON]: [NoticeMessage]\n  [NoticeCompounds.HOSTS_REMAINING]: [NoticeMessage]\n  [NoticeCompounds.MSG_CHANNEL_SUSPENDED]: [NoticeMessage]\n  [NoticeCompounds.MOD_SUCCESS]: [NoticeMessage]\n  [NoticeCompounds.R9K_OFF]: [NoticeMessage]\n  [NoticeCompounds.R9K_ON]: [NoticeMessage]\n  [NoticeCompounds.ROOM_MODS]: [NoticeRoomModsMessage]\n  [NoticeCompounds.SLOW_OFF]: [NoticeMessage]\n  [NoticeCompounds.SLOW_ON]: [NoticeMessage]\n  [NoticeCompounds.SUBS_OFF]: [NoticeMessage]\n  [NoticeCompounds.SUBS_ON]: [NoticeMessage]\n  [NoticeCompounds.TIMEOUT_SUCCESS]: [NoticeMessage]\n  [NoticeCompounds.UNBAN_SUCCESS]: [NoticeMessage]\n  [NoticeCompounds.UNRAID_SUCCESS]: [NoticeMessage]\n  [NoticeCompounds.UNRECOGNIZED_CMD]: [NoticeMessage]\n\n  /**\n   * PRIVMSG messages\n   */\n\n  [Events.PRIVATE_MESSAGE]: [PrivateMessages]\n\n  [Events.CHEER]: [PrivateMessageWithBits]\n  [Events.HOSTED_WITHOUT_VIEWERS]: [HostingPrivateMessage]\n  [Events.HOSTED_WITH_VIEWERS]: [HostingWithViewersPrivateMessage]\n  [Events.HOSTED_AUTO]: [HostingAutoPrivateMessage]\n\n  [PrivateMessageCompounds.CHEER]: [PrivateMessageWithBits]\n  [PrivateMessageCompounds.HOSTED_WITHOUT_VIEWERS]: [HostingPrivateMessage]\n  [PrivateMessageCompounds.HOSTED_WITH_VIEWERS]: [\n    HostingWithViewersPrivateMessage,\n  ]\n  [PrivateMessageCompounds.HOSTED_AUTO]: [HostingAutoPrivateMessage]\n\n  /**\n   * USERNOTICE messages\n   */\n\n  [Events.USER_NOTICE]: [UserNoticeMessages]\n\n  [Events.ANON_GIFT_PAID_UPGRADE]: [UserNoticeAnonymousGiftPaidUpgradeMessage]\n  [Events.GIFT_PAID_UPGRADE]: [UserNoticeGiftPaidUpgradeMessage]\n  [Events.RAID]: [UserNoticeRaidMessage]\n  [Events.RESUBSCRIPTION]: [UserNoticeResubscriptionMessage]\n  [Events.RITUAL]: [UserNoticeRitualMessage]\n  [Events.SUBSCRIPTION]: [UserNoticeSubscriptionMessage]\n  [Events.SUBSCRIPTION_GIFT]: [UserNoticeSubscriptionGiftMessage]\n  [Events.SUBSCRIPTION_GIFT_COMMUNITY]: [\n    UserNoticeSubscriptionGiftCommunityMessage,\n  ]\n\n  [UserNoticeCompounds.ANON_GIFT_PAID_UPGRADE]: [\n    UserNoticeAnonymousGiftPaidUpgradeMessage,\n  ]\n  [UserNoticeCompounds.GIFT_PAID_UPGRADE]: [UserNoticeGiftPaidUpgradeMessage]\n  [UserNoticeCompounds.RAID]: [UserNoticeRaidMessage]\n  [UserNoticeCompounds.RESUBSCRIPTION]: [UserNoticeResubscriptionMessage]\n  [UserNoticeCompounds.RITUAL]: [UserNoticeRitualMessage]\n  [UserNoticeCompounds.SUBSCRIPTION]: [UserNoticeSubscriptionMessage]\n  [UserNoticeCompounds.SUBSCRIPTION_GIFT]: [UserNoticeSubscriptionGiftMessage]\n  [UserNoticeCompounds.SUBSCRIPTION_GIFT_COMMUNITY]: [\n    UserNoticeSubscriptionGiftCommunityMessage,\n  ]\n\n  [key: string]: [string | Messages | Message]\n}\n","import EventEmitter from 'eventemitter3'\n\nexport const resolveAfter = (ms: number) =>\n  new Promise(resolve => setTimeout(resolve, ms))\n\nexport const resolveOnEvent = <T>(\n  emitter: EventEmitter<any>,\n  eventName: string,\n): Promise<T> => new Promise(resolve => emitter.once(eventName, resolve))\n\nexport const resolveInSequence = (tasks: (() => Promise<any>)[]) =>\n  tasks.reduce((p, task) => p.then(task), Promise.resolve())\n\nexport const rejectAfter = (ms: number, error: Error): Promise<never> =>\n  new Promise((r, reject) => setTimeout(reject, ms, error))\n","export const CHAT_SERVER = 'irc-ws.chat.twitch.tv'\nexport const CHAT_SERVER_PORT = 6667\nexport const CHAT_SERVER_SSL_PORT = 443\n\nexport const CONNECTION_TIMEOUT = 5000\nexport const KEEP_ALIVE_PING_TIMEOUT = 150000\nexport const KEEP_ALIVE_RECONNECT_TIMEOUT = 200000\n\nexport const JOIN_TIMEOUT = 1000 // milliseconds.\nexport const COMMAND_TIMEOUT = 1000 // milliseconds.\n\nexport const CLIENT_PRIORITY = 100\n\n// See https://dev.twitch.tv/docs/irc/guide/#command--message-limits.\nexport const RATE_LIMIT_USER = 20 // per period.\nexport const RATE_LIMIT_MODERATOR = 100 // per period.\nexport const RATE_LIMIT_KNOWN_BOT = 50 // per period.\nexport const RATE_LIMIT_VERIFIED_BOT = 7500 // per period.\n\nexport const ERROR_CONNECT_TIMED_OUT = 'ERROR: connect timed out'\nexport const ERROR_CONNECTION_IN_PROGRESS = 'ERROR: connection in progress'\nexport const ERROR_JOIN_TIMED_OUT = 'ERROR: join timed out'\nexport const ERROR_SAY_TIMED_OUT = 'ERROR: say timed out'\nexport const ERROR_COMMAND_TIMED_OUT = 'ERROR: command timed out'\nexport const ERROR_COMMAND_UNRECOGNIZED = 'ERROR: command unrecognized'\nexport const ERROR_PART_TIMED_OUT = 'ERROR: part timed out'\n\nexport const MESSAGE_PARAMETER_PREFIX = 'msgParam'\nexport const MESSAGE_PARAMETER_PREFIX_RE = new RegExp(\n  `^${MESSAGE_PARAMETER_PREFIX}(\\\\w+)`,\n)\nexport const PRIVATE_MESSAGE_HOSTED_RE = /:.+@jtv\\.tmi\\.twitch\\.tv PRIVMSG #?(\\w+) :(\\w+) is now (?:(auto) )?hosting[A-z ]+(\\d+)?/\n\nexport const ANONYMOUS_USERNAME = 'justinfan'\nexport const ANONYMOUS_USERNAME_RE = new RegExp(`^${ANONYMOUS_USERNAME}(\\\\d+)$`)\n","import { BaseMessage, Events, Commands } from '../../twitch'\n\nimport * as constants from '../constants'\n\nexport const isAuthenticationFailedMessage = (message?: BaseMessage) =>\n  typeof message !== 'undefined' &&\n  message.command === Commands.NOTICE &&\n  message.channel === '' &&\n  message.message === 'Login authentication failed'\n\nexport const getEventNameFromMessage = (message: BaseMessage) =>\n  typeof message !== 'undefined' ? message.command || message.event : Events.ALL\n\nexport const isUserAnonymous = (value: string) =>\n  constants.ANONYMOUS_USERNAME_RE.test(value)\n","import PQueue from 'p-queue'\n\ntype Options = ConstructorParameters<typeof PQueue>[0]\n\nclass Queue {\n  private _q: PQueue\n\n  constructor(options: Options = {}) {\n    this._q = new PQueue({\n      intervalCap: 20,\n      interval: 30000,\n      carryoverConcurrencyCount: true,\n      concurrency: 1,\n      ...options,\n    })\n  }\n\n  push = ({ fn, priority = 100 }) => {\n    return this._q.add<void>(fn, { priority })\n  }\n}\n\nexport default Queue\n","import camelCase from 'lodash/camelCase'\nimport isFinite from 'lodash/isFinite'\nimport replace from 'lodash/replace'\nimport toLower from 'lodash/toLower'\n\nimport { Badges, BooleanBadges, NumberBadges, EmoteTag } from '../../../twitch'\n\nexport const generalString = (maybeMessage: string) => {\n  return typeof maybeMessage === 'string'\n    ? replace(maybeMessage, /\\\\[sn]/g, ' ')\n    : undefined\n}\n\nexport const generalNumber = (maybeNumber: string) => {\n  const number = parseInt(maybeNumber, 10)\n  return isFinite(number) ? number : undefined\n}\n\nexport const generalBoolean = (maybeBoolean: string) => maybeBoolean === '1'\n\nexport const generalTimestamp = (maybeTimestamp: string) => {\n  const timestamp = new Date(parseInt(maybeTimestamp, 10))\n  return timestamp.toString() !== 'Invalid Date' ? timestamp : new Date()\n}\n\nexport const userType = (maybeUserType: string) => {\n  return typeof maybeUserType === 'string' ? maybeUserType : undefined\n}\n\nexport const broadcasterLanguage = (maybeLanguage: string) => {\n  return typeof maybeLanguage === 'string' ? maybeLanguage : undefined\n}\n\nexport const followersOnly = (maybeFollowersOnly: string) => {\n  const followersOnlyAsNumber = parseInt(maybeFollowersOnly, 10)\n\n  if (followersOnlyAsNumber === 0) {\n    return true\n  } else if (followersOnlyAsNumber > 0) {\n    return followersOnlyAsNumber\n  }\n\n  return false\n}\n\n/**\n * Badges tag\n * @see https://dev.twitch.tv/docs/irc/tags/#privmsg-twitch-tags\n */\nexport const badges = (maybeBadges: string): Partial<Badges> => {\n  return typeof maybeBadges === 'string'\n    ? maybeBadges.split(',').reduce((parsed, badge) => {\n        const [rawKey, value] = badge.split('/')\n        const key = camelCase(rawKey)\n\n        if (BooleanBadges[key] === 'boolean') {\n          return { ...parsed, [key]: generalBoolean(value) }\n        }\n\n        if (NumberBadges[key] === 'number') {\n          return { ...parsed, [key]: parseInt(value, 10) }\n        }\n\n        return { ...parsed, [key]: value }\n      }, {} as Badges)\n    : {}\n}\n\n/**\n * Emote tag\n * @see https://dev.twitch.tv/docs/irc/tags/#privmsg-twitch-tags\n */\nexport const emotes = (maybeEmotes: string) => {\n  if (typeof maybeEmotes !== 'string') {\n    return []\n  }\n\n  return maybeEmotes.split('/').reduce((emoteTag, emoteIndices) => {\n    const [id, indices] = emoteIndices.split(':')\n\n    if (!id) {\n      return emoteTag\n    }\n\n    return [\n      ...emoteTag,\n      ...indices.split(',').map(index => {\n        const [start, end] = index.split('-')\n        return { id, start: parseInt(start, 10), end: parseInt(end, 10) }\n      }),\n    ]\n  }, [] as EmoteTag[])\n}\n\nexport const emoteSets = (maybeEmoteSets: string) => {\n  return typeof maybeEmoteSets === 'string' ? maybeEmoteSets.split(',') : []\n}\n\nexport const mods = (message: string) => {\n  const [, modList] = message.split(': ')\n  return modList.split(', ')\n}\n\nexport const username = (...maybeUsernames: any[]): string | undefined =>\n  maybeUsernames.reduce((maybeUsername, name) => {\n    if (typeof name !== 'string') {\n      return maybeUsername\n    }\n\n    if (name === 'tmi.twitch.tv') {\n      return 'tmi.twitch.tv'\n    }\n\n    return toLower(name).split('.')[0]\n  }, undefined)\n","import camelCase from 'lodash/camelCase'\nimport gt from 'lodash/gt'\nimport toLower from 'lodash/toLower'\n\nimport {\n  BaseTags,\n  ClearChatTags,\n  GlobalUserStateTags,\n  ChatEvents,\n  Commands,\n  RoomStateTags,\n  UserStateTags,\n  MessageParameters,\n} from '../../../twitch'\n\nimport * as constants from '../../constants'\nimport * as helpers from './helpers'\n\nexport const clearChat = (tags: BaseTags): ClearChatTags => ({\n  ...tags,\n  banReason: helpers.generalString(tags.banReason),\n  banDuration: helpers.generalNumber(tags.banDuration),\n})\n\nexport const privateMessageCheerEvent = (tags: BaseTags) => {\n  return gt(tags.bits, 0)\n    ? { event: ChatEvents.CHEER, bits: parseInt(tags.bits, 10) }\n    : { event: Commands.PRIVATE_MESSAGE }\n}\n\nexport const roomState = (roomStateTags: BaseTags): RoomStateTags =>\n  Object.entries(roomStateTags).reduce((tags, [tag, value]) => {\n    switch (tag) {\n      case 'followersOnly':\n        return { ...tags, [tag]: helpers.followersOnly(value) }\n      // Strings\n      case 'broadcasterLang':\n        return { ...tags, [tag]: helpers.generalString(value) }\n      // Numbers\n      case 'slow':\n        return { ...tags, [tag]: helpers.generalNumber(value) }\n      // Booleans\n      case 'emoteOnly':\n      case 'r9k':\n      case 'subsOnly':\n        return { ...tags, [tag]: helpers.generalBoolean(value) }\n      default:\n        return { ...tags, [tag]: value }\n    }\n  }, {})\n\nexport const userNoticeMessageParameters = (tags: BaseTags) =>\n  Object.entries(tags).reduce((parameters, [tag, value]) => {\n    const [, param] = constants.MESSAGE_PARAMETER_PREFIX_RE.exec(tag) || []\n\n    switch (param) {\n      // Numbers.\n      case 'Months':\n      case 'MassGiftCount':\n      case 'PromoGiftTotal':\n      case 'SenderCount':\n      case 'ViewerCount':\n        return {\n          ...parameters,\n          [camelCase(param)]: helpers.generalNumber(value),\n        }\n      // Not a msgParam.\n      case undefined:\n        return parameters\n      // Strings\n      default:\n        return {\n          ...parameters,\n          [camelCase(param)]: helpers.generalString(value),\n        }\n    }\n  }, {} as MessageParameters)\n\nexport const userState = (tags: BaseTags): UserStateTags => ({\n  ...tags,\n  badges: helpers.badges(tags.badges),\n  bits: helpers.generalNumber(tags.bits),\n  color: tags.color,\n  displayName: tags.displayName,\n  emotes: helpers.emotes(tags.emotes),\n  emoteSets: helpers.emoteSets(tags.emoteSets),\n  userType: helpers.userType(tags.userType),\n  username: tags.displayName ? toLower(tags.displayName) : undefined,\n})\n\nexport const globalUserState = (tags: BaseTags): GlobalUserStateTags => ({\n  ...tags,\n  ...userState(tags),\n})\n\nexport const privateMessage = userState\n\nexport const userNotice = userState\n","import { parse } from 'tekko/dist/parse'\nimport camelcaseKeys from 'camelcase-keys'\n\nimport gt from 'lodash/gt'\nimport isEmpty from 'lodash/isEmpty'\nimport isFinite from 'lodash/isFinite'\nimport toLower from 'lodash/toLower'\nimport toNumber from 'lodash/toNumber'\nimport toUpper from 'lodash/toUpper'\n\nimport {\n  BaseMessage,\n  Commands,\n  JoinMessage,\n  PartMessage,\n  ModeMessages,\n  ChatEvents,\n  Events,\n  NamesMessage,\n  NamesEndMessage,\n  GlobalUserStateMessage,\n  HostTargetMessage,\n  RoomStateMessage,\n  NoticeMessage,\n  UserNoticeTags,\n  KnownNoticeMessageIds,\n  UserStateMessage,\n  KnownUserNoticeMessageIds,\n  ClearChatMessages,\n  NoticeMessages,\n  NoticeEvents,\n  PrivateMessages,\n  NoticeTags,\n  UserNoticeMessages,\n  GiftPaidUpgradeParameters,\n  RaidParameters,\n  ResubscriptionParameters,\n  RitualParameters,\n  SubscriptionGiftCommunityParameters,\n  SubscriptionGiftParameters,\n  SubscriptionParameters,\n} from '../../../twitch'\n\nimport * as constants from '../../constants'\nimport * as utils from '../'\nimport * as helpers from './helpers'\nimport * as tagParsers from './tags'\n\nexport const base = (rawMessages: string, username: string): BaseMessage[] => {\n  const rawMessagesV = rawMessages.split(/\\r?\\n/g)\n\n  return rawMessagesV.reduce((messages, rawMessage) => {\n    if (!rawMessage.length) {\n      return messages\n    }\n\n    const {\n      command,\n      tags = {},\n      prefix: { name, user, host } = {\n        name: undefined,\n        user: undefined,\n        host: undefined,\n      },\n      params: [channel, message],\n    } = parse(rawMessage)\n\n    const timestamp = String(tags['tmi-sent-ts']) || Date.now().toString()\n\n    const messageTags = isEmpty(tags)\n      ? {}\n      : (camelcaseKeys(tags) as { [key: string]: string })\n\n    const messageUsername = helpers.username(\n      host,\n      name,\n      user,\n      messageTags.login,\n      messageTags.username,\n      messageTags.displayName,\n    )\n\n    const baseMessage = {\n      _raw: rawMessage,\n      timestamp: helpers.generalTimestamp(timestamp),\n      command: command as Commands,\n      event: command as Events,\n      channel: channel !== '*' ? channel : '',\n      username: messageUsername,\n      isSelf:\n        typeof messageUsername === 'string' &&\n        toLower(username) === messageUsername,\n      tags: messageTags,\n      message,\n    }\n\n    return [...messages, baseMessage]\n  }, [] as BaseMessage[])\n}\n\n/**\n * Join a channel.\n * @see https://dev.twitch.tv/docs/irc/membership/#join-twitch-membership\n */\nexport const joinMessage = (baseMessage: BaseMessage): JoinMessage => {\n  const [\n    ,\n    username,\n    ,\n    ,\n    channel,\n  ] = /:(.+)!(.+)@(.+).tmi.twitch.tv JOIN (#.+)/g.exec(baseMessage._raw)\n\n  return {\n    ...baseMessage,\n    channel,\n    command: Commands.JOIN,\n    event: Commands.JOIN,\n    username,\n  }\n}\n\n/**\n * Join or depart from a channel.\n * @see https://dev.twitch.tv/docs/irc/membership/#join-twitch-membership\n * @see https://dev.twitch.tv/docs/irc/membership/#part-twitch-membership\n */\nexport const partMessage = (baseMessage: BaseMessage): PartMessage => {\n  const [\n    ,\n    username,\n    ,\n    ,\n    channel,\n  ] = /:(.+)!(.+)@(.+).tmi.twitch.tv PART (#.+)/g.exec(baseMessage._raw)\n\n  return {\n    ...baseMessage,\n    channel,\n    command: Commands.PART,\n    event: Commands.PART,\n    username,\n  }\n}\n\n/**\n * Gain/lose moderator (operator) status in a channel.\n * @see https://dev.twitch.tv/docs/irc/membership/#mode-twitch-membership\n */\nexport const modeMessage = (baseMessage: BaseMessage): ModeMessages => {\n  const [\n    ,\n    channel,\n    mode,\n    username,\n  ] = /:[^\\s]+ MODE (#[^\\s]+) (-|\\+)o ([^\\s]+)/g.exec(baseMessage._raw)\n\n  const isModerator = mode === '+'\n\n  const baseModeMessage = {\n    ...baseMessage,\n    command: Commands.MODE as Commands.MODE,\n    channel,\n    username,\n  }\n\n  return isModerator\n    ? {\n        ...baseModeMessage,\n        event: ChatEvents.MOD_GAINED,\n        message: `+o`,\n        isModerator: true,\n      }\n    : {\n        ...baseModeMessage,\n        event: ChatEvents.MOD_LOST,\n        message: '-o',\n        isModerator: false,\n      }\n}\n\n/**\n * List current chatters in a channel.\n * @see https://dev.twitch.tv/docs/irc/membership/#names-twitch-membership\n */\nexport const namesMessage = (baseMessage: BaseMessage): NamesMessage => {\n  const [\n    ,\n    ,\n    ,\n    channel,\n    names,\n  ] = /:(.+).tmi.twitch.tv 353 (.+) = (#.+) :(.+)/g.exec(baseMessage._raw)\n\n  const namesV = names.split(' ')\n\n  return {\n    ...baseMessage,\n    channel,\n    command: Commands.NAMES,\n    event: Commands.NAMES,\n    usernames: namesV,\n  }\n}\n\n/**\n * End of list current chatters in a channel.\n * @see https://dev.twitch.tv/docs/irc/membership/#names-twitch-membership\n */\nexport const namesEndMessage = (baseMessage: BaseMessage): NamesEndMessage => {\n  const [\n    ,\n    username,\n    ,\n    channel,\n    // message,\n  ] = /:(.+).tmi.twitch.tv 366 (.+) (#.+) :(.+)/g.exec(baseMessage._raw)\n\n  return {\n    ...baseMessage,\n    channel,\n    command: Commands.NAMES_END,\n    event: Commands.NAMES_END,\n    username,\n  }\n}\n\n/**\n * GLOBALUSERSTATE message\n */\nexport const globalUserStateMessage = (\n  baseMessage: BaseMessage,\n): GlobalUserStateMessage => {\n  const { tags, ...other } = baseMessage\n\n  return {\n    ...other,\n    command: Commands.GLOBAL_USER_STATE,\n    event: Commands.GLOBAL_USER_STATE,\n    tags: tagParsers.globalUserState(tags),\n  }\n}\n\n/**\n * Temporary or permanent ban on a channel.\n * @see https://dev.twitch.tv/docs/irc/commands/#clearchat-twitch-commands\n *\n * All chat is cleared (deleted).\n * @see https://dev.twitch.tv/docs/irc/tags/#clearchat-twitch-tags\n */\nexport const clearChatMessage = (\n  baseMessage: BaseMessage,\n): ClearChatMessages => {\n  const { tags, message: username, ...other } = baseMessage\n\n  if (typeof username !== 'undefined') {\n    return {\n      ...other,\n      tags: {\n        ...tags,\n        banReason: helpers.generalString(tags.banReason),\n        banDuration: helpers.generalNumber(tags.banDuration),\n      },\n      command: Commands.CLEAR_CHAT,\n      event: ChatEvents.USER_BANNED,\n      username,\n    }\n  }\n\n  return {\n    ...other,\n    command: Commands.CLEAR_CHAT,\n    event: Commands.CLEAR_CHAT,\n  }\n}\n\n/**\n * Host starts or stops a message.\n * @see https://dev.twitch.tv/docs/irc/commands/#hosttarget-twitch-commands\n */\nexport const hostTargetMessage = (\n  baseMessage: BaseMessage,\n): HostTargetMessage => {\n  const [\n    ,\n    channel,\n    username,\n    numberOfViewers,\n  ] = /:tmi.twitch.tv HOSTTARGET (#[^\\s]+) :([^\\s]+)?\\s?(\\d+)?/g.exec(\n    baseMessage._raw,\n  )\n  const isStopped = username === '-'\n\n  return {\n    ...baseMessage,\n    channel,\n    username,\n    command: Commands.HOST_TARGET,\n    event: isStopped ? ChatEvents.HOST_OFF : ChatEvents.HOST_ON,\n    numberOfViewers: isFinite(toNumber(numberOfViewers))\n      ? parseInt(numberOfViewers, 10)\n      : undefined,\n    message: undefined,\n  }\n}\n\n/**\n * When a user joins a channel or a room setting is changed.\n */\nexport const roomStateMessage = (\n  baseMessage: BaseMessage,\n): RoomStateMessage => {\n  const { tags, ...other } = baseMessage\n\n  return {\n    ...other,\n    command: Commands.ROOM_STATE,\n    event: Commands.ROOM_STATE,\n    tags: tagParsers.roomState(tags),\n  }\n}\n\n/**\n * NOTICE/ROOM_MODS message\n * @see https://dev.twitch.tv/docs/irc/commands/#msg-id-tags-for-the-notice-commands-capability\n */\nexport const noticeMessage = (baseMessage: BaseMessage): NoticeMessages => {\n  const { tags: baseTags, ...other } = baseMessage\n\n  const tags = (utils.isAuthenticationFailedMessage(baseMessage)\n    ? { ...baseTags, msgId: toLower(Events.AUTHENTICATION_FAILED) }\n    : baseTags) as NoticeTags\n\n  const event = toUpper(tags.msgId) as NoticeEvents\n\n  switch (tags.msgId) {\n    case KnownNoticeMessageIds.ROOM_MODS:\n      return {\n        ...other,\n        command: Commands.NOTICE,\n        event: NoticeEvents.ROOM_MODS,\n        tags,\n        mods: helpers.mods(other.message),\n      }\n    default:\n      return {\n        ...other,\n        command: Commands.NOTICE,\n        event,\n        tags,\n      } as NoticeMessage\n  }\n}\n\n/**\n * USERSTATE message\n * When a user joins a channel or sends a PRIVMSG to a channel.\n */\nexport const userStateMessage = (\n  baseMessage: BaseMessage,\n): UserStateMessage => {\n  const { tags, ...other } = baseMessage\n\n  return {\n    ...other,\n    command: Commands.USER_STATE,\n    event: Commands.USER_STATE,\n    tags: tagParsers.userState(tags),\n  }\n}\n\n/**\n * PRIVMSG message\n * When a user joins a channel or sends a PRIVMSG to a channel.\n * When a user cheers a channel.\n * When a user hosts your channel while connected as broadcaster.\n */\nexport const privateMessage = (baseMessage: BaseMessage): PrivateMessages => {\n  const { _raw, tags } = baseMessage\n\n  if (gt(tags.bits, 0)) {\n    return {\n      ...userStateMessage(baseMessage),\n      command: Commands.PRIVATE_MESSAGE,\n      event: ChatEvents.CHEER,\n      bits: helpers.generalNumber(tags.bits),\n    }\n  }\n\n  const [\n    isHostingPrivateMessage,\n    channel,\n    displayName,\n    isAuto,\n    numberOfViewers,\n  ] = constants.PRIVATE_MESSAGE_HOSTED_RE.exec(_raw) || []\n\n  if (isHostingPrivateMessage) {\n    if (isAuto) {\n      return {\n        ...baseMessage,\n        command: Commands.PRIVATE_MESSAGE,\n        event: ChatEvents.HOSTED_AUTO,\n        channel: `#${channel}`,\n        tags: { displayName },\n        numberOfViewers: helpers.generalNumber(numberOfViewers),\n      }\n    }\n\n    if (numberOfViewers) {\n      return {\n        ...baseMessage,\n        command: Commands.PRIVATE_MESSAGE,\n        event: ChatEvents.HOSTED_WITH_VIEWERS,\n        channel: `#${channel}`,\n        tags: { displayName },\n        numberOfViewers: helpers.generalNumber(numberOfViewers),\n      }\n    }\n\n    return {\n      ...baseMessage,\n      command: Commands.PRIVATE_MESSAGE,\n      event: ChatEvents.HOSTED_WITHOUT_VIEWERS,\n      channel: `#${channel}`,\n      tags: { displayName },\n    }\n  }\n\n  return {\n    ...userStateMessage(baseMessage),\n    command: Commands.PRIVATE_MESSAGE,\n    event: Commands.PRIVATE_MESSAGE,\n  }\n}\n\n/**\n * USERNOTICE message\n */\nexport const userNoticeMessage = (\n  baseMessage: BaseMessage,\n): UserNoticeMessages => {\n  const command = Commands.USER_NOTICE\n  const tags = {\n    ...tagParsers.userNotice(baseMessage.tags),\n    systemMsg: helpers.generalString(baseMessage.tags.systemMsg),\n  } as UserNoticeTags\n  const systemMessage = helpers.generalString(baseMessage.tags.systemMsg)\n  const parameters = tagParsers.userNoticeMessageParameters(tags)\n\n  switch (tags.msgId) {\n    /**\n     * On anonymous gifted subscription paid upgrade to a channel.\n     */\n    case KnownUserNoticeMessageIds.ANON_GIFT_PAID_UPGRADE:\n      return {\n        ...baseMessage,\n        command,\n        event: ChatEvents.ANON_GIFT_PAID_UPGRADE,\n        parameters,\n        tags,\n        systemMessage,\n      }\n\n    /**\n     * On gifted subscription paid upgrade to a channel.\n     */\n    case KnownUserNoticeMessageIds.GIFT_PAID_UPGRADE:\n      return {\n        ...baseMessage,\n        command,\n        event: ChatEvents.GIFT_PAID_UPGRADE,\n        parameters: parameters as GiftPaidUpgradeParameters,\n        tags,\n        systemMessage,\n      }\n\n    /**\n     * On channel raid.\n     */\n    case KnownUserNoticeMessageIds.RAID:\n      return {\n        ...baseMessage,\n        command,\n        event: ChatEvents.RAID,\n        parameters: parameters as RaidParameters,\n        tags,\n        systemMessage,\n      }\n\n    /**\n     * On resubscription (subsequent months) to a channel.\n     */\n    case KnownUserNoticeMessageIds.RESUBSCRIPTION:\n      return {\n        ...baseMessage,\n        command,\n        event: ChatEvents.RESUBSCRIPTION,\n        parameters: parameters as ResubscriptionParameters,\n        tags,\n        systemMessage,\n      }\n\n    /**\n     * On channel ritual.\n     */\n    case KnownUserNoticeMessageIds.RITUAL:\n      return {\n        ...baseMessage,\n        command,\n        event: ChatEvents.RITUAL,\n        parameters: parameters as RitualParameters,\n        tags,\n        systemMessage,\n      }\n\n    /**\n     * On subscription gift to a channel community.\n     */\n    case KnownUserNoticeMessageIds.SUBSCRIPTION_GIFT_COMMUNITY:\n      return {\n        ...baseMessage,\n        command,\n        event: ChatEvents.SUBSCRIPTION_GIFT_COMMUNITY,\n        parameters: parameters as SubscriptionGiftCommunityParameters,\n        tags,\n        systemMessage,\n      }\n\n    /**\n     * On subscription gift to a channel.\n     */\n    case KnownUserNoticeMessageIds.SUBSCRIPTION_GIFT:\n      return {\n        ...baseMessage,\n        command,\n        event: ChatEvents.SUBSCRIPTION_GIFT,\n        parameters: parameters as SubscriptionGiftParameters,\n        tags,\n        systemMessage,\n      }\n\n    /**\n     * On subscription (first month) to a channel.\n     */\n    case KnownUserNoticeMessageIds.SUBSCRIPTION:\n      return {\n        ...baseMessage,\n        command,\n        event: ChatEvents.SUBSCRIPTION,\n        parameters: parameters as SubscriptionParameters,\n        tags,\n        systemMessage,\n      }\n\n    /**\n     * Unknown USERNOTICE event.\n     */\n    default:\n      return {\n        ...baseMessage,\n        command,\n        event: toUpper(tags.msgId),\n        tags,\n        parameters,\n        systemMessage,\n      } as UserNoticeMessages\n  }\n}\n\nexport default base\n","import isEmpty from 'lodash/isEmpty'\nimport random from 'lodash/random'\nimport toLower from 'lodash/toLower'\n\nimport { ANONYMOUS_USERNAME } from '../constants'\n\nexport const channel = (value: any): string => {\n  if (value == null) {\n    return '#'\n  }\n\n  if (value.startsWith('#')) {\n    return value\n  }\n\n  return toLower(`#${value}`)\n}\n\nexport const token = (value: any): string => {\n  if (value == null) {\n    return 'TWITCHJS'\n  }\n\n  if (value.startsWith('oauth:')) {\n    return value\n  }\n\n  return `oauth:${value}`\n}\n\nexport const username = (value: any): string => {\n  if (isEmpty(value) || value === 'justinfan') {\n    return `${ANONYMOUS_USERNAME}${random(80000, 81000)}`\n  }\n\n  return value\n}\n","import invariant from 'invariant'\n\nimport conformsTo from 'lodash/conformsTo'\nimport defaults from 'lodash/defaults'\nimport isString from 'lodash/isString'\nimport isFinite from 'lodash/isFinite'\nimport isFunction from 'lodash/isFunction'\nimport isBoolean from 'lodash/isBoolean'\nimport isNil from 'lodash/isNil'\n\nimport * as types from '../types'\n\nimport * as constants from '../constants'\nimport * as sanitizers from './sanitizers'\n\nexport const chatOptions = (\n  maybeOptions: types.ChatOptions,\n): types.ChatOptions => {\n  const shape = {\n    username: isString,\n    token: (value: any) => isNil(value) || isString(value),\n    isKnown: isBoolean,\n    isVerified: isBoolean,\n    connectionTimeout: isFinite,\n    joinTimeout: isFinite,\n    onAuthenticationFailure: isFunction,\n  }\n\n  const options: types.ChatOptions = defaults(\n    {\n      ...maybeOptions,\n      username: sanitizers.username(maybeOptions.username),\n      token: sanitizers.token(maybeOptions.token),\n    },\n    {\n      isKnown: false,\n      isVerified: false,\n      connectionTimeout: constants.CONNECTION_TIMEOUT,\n      joinTimeout: constants.JOIN_TIMEOUT,\n      onAuthenticationFailure: () => Promise.reject(),\n    },\n  )\n\n  invariant(\n    conformsTo(options, shape),\n    '[twitch-js/Chat] options: Expected valid options',\n  )\n\n  return options\n}\n\nexport const clientOptions = (\n  maybeOptions: types.ClientOptions,\n): types.ClientOptions => {\n  const shape = {\n    username: isString,\n    token: isString,\n    server: isString,\n    port: isFinite,\n    ssl: isBoolean,\n    isKnown: isBoolean,\n    isVerified: isBoolean,\n  }\n\n  const options: types.ClientOptions = defaults(\n    {\n      ...maybeOptions,\n      username: sanitizers.username(maybeOptions.username),\n      token: sanitizers.token(maybeOptions.token),\n    },\n    {\n      server: constants.CHAT_SERVER,\n      port: constants.CHAT_SERVER_SSL_PORT,\n      ssl: true,\n      isKnown: false,\n      isVerified: false,\n    },\n  )\n\n  invariant(\n    conformsTo(options, shape),\n    '[twitch-js/Chat/Client] options: Expected valid options',\n  )\n\n  return options\n}\n","class BaseError extends Error {\n  timestamp: Date = new Date()\n\n  constructor(message: string) {\n    super(message)\n\n    /**\n     * Set the prototype explicitly.\n     * @see https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work\n     */\n    Object.setPrototypeOf(this, BaseError.prototype)\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, BaseError)\n    }\n\n    this.message = `[TwitchJS] ${message}`\n  }\n}\n\nexport default BaseError\n","import { Commands, Events, BaseMessage, ChatEvents } from '../twitch'\n\nimport BaseError from '../utils/BaseError'\n\nclass ChatError extends BaseError {\n  command: Commands | Events\n\n  constructor(error: Error | string, message?: BaseMessage | string) {\n    const errorMessage = error instanceof Error ? error.message : error\n    super(`${errorMessage} [Chat]`)\n    Object.setPrototypeOf(this, ChatError.prototype)\n\n    if (typeof message !== 'undefined' && typeof message !== 'string') {\n      this.command = message.command\n    }\n  }\n}\n\nexport class AuthenticationError extends ChatError {\n  constructor(error: Error, message?: BaseMessage) {\n    super('Authentication error encountered', message)\n    Object.setPrototypeOf(this, AuthenticationError.prototype)\n\n    Object.assign(this, error)\n    Object.assign(this, message)\n  }\n}\n\nexport class ParseError extends ChatError {\n  _raw: string\n\n  constructor(error: Error, rawMessage: string) {\n    super('Parse error encountered')\n    Object.setPrototypeOf(this, ParseError.prototype)\n\n    Object.assign(this, error)\n\n    this._raw = rawMessage\n    this.command = ChatEvents.PARSE_ERROR_ENCOUNTERED\n  }\n}\n\nexport class JoinError extends ChatError {\n  constructor(message = 'Error: join') {\n    super(message)\n    Object.setPrototypeOf(this, JoinError.prototype)\n  }\n}\n\nexport class TimeoutError extends ChatError {\n  constructor(message = 'Error: timeout') {\n    super(message)\n    Object.setPrototypeOf(this, TimeoutError.prototype)\n  }\n}\n\nexport default ChatError\n","import EventEmitter from 'eventemitter3'\nimport get from 'lodash/get'\nimport { stringify } from 'qs'\nimport WebSocket from 'ws'\n\nimport { ChatEvents, Commands, Capabilities } from '../twitch'\n\nimport Queue from '../Queue'\n\nimport createLogger, { Logger } from '../utils/logger'\n\nimport * as constants from './constants'\nimport baseParser from './utils/parsers'\nimport * as validators from './utils/validators'\nimport * as utils from './utils'\n\nimport * as Errors from './Errors'\n\nimport { ClientOptions } from './types'\n\ntype SendOptions = { priority?: number; isModerator?: boolean }\n\nconst priority = constants.CLIENT_PRIORITY\n\nclass Client extends EventEmitter {\n  private _options: ClientOptions\n  private _log: Logger\n\n  private _ws: WebSocket\n\n  private _queue: Queue\n  private _moderatorQueue: Queue\n\n  private _pingTimeoutId: NodeJS.Timeout\n  private _reconnectTimeoutId: NodeJS.Timeout\n\n  constructor(maybeOptions: ClientOptions) {\n    super()\n\n    // Validate options.\n    this._options = validators.clientOptions(maybeOptions)\n    const { ssl, server, port, log } = this._options\n\n    this._log = createLogger({ name: 'Chat/Client', ...log })\n\n    // Instantiate WebSocket.\n    const protocol = ssl ? 'wss' : 'ws'\n    this._ws = new WebSocket(`${protocol}://${server}:${port}`)\n\n    this._ws.onopen = this._handleOpen.bind(this)\n    this._ws.onmessage = this._handleMessage.bind(this)\n    this._ws.onerror = this._handleError.bind(this)\n    this._ws.onclose = this._handleClose.bind(this)\n\n    // Instantiate Queue.\n    this._queue = this._createQueue(this._options)\n    this._moderatorQueue = this._options.isVerified\n      ? this._queue\n      : this._createQueue({ isModerator: true })\n  }\n\n  isReady = () => get(this, '_ws.readyState') === 1\n\n  /**\n   * Send message to Twitch\n   */\n  send = async (\n    message: string,\n    { priority = 1, isModerator = false }: SendOptions = {},\n  ) => {\n    try {\n      const fn = this._ws.send.bind(this._ws, message)\n\n      const queue = isModerator ? this._moderatorQueue : this._queue\n\n      await queue.push({ fn, priority })\n      this._log.debug('<', message)\n    } catch (error) {\n      this._log.error('<', message)\n    }\n  }\n\n  disconnect = () => {\n    this._handleKeepAliveReset()\n    this._ws.close()\n  }\n\n  private _createQueue({\n    isModerator = false,\n    isVerified = false,\n    isKnown = false,\n  }: {\n    isModerator?: boolean\n    isVerified?: boolean\n    isKnown?: boolean\n  }) {\n    if (isModerator) {\n      return new Queue({ intervalCap: constants.RATE_LIMIT_MODERATOR })\n    } else if (isVerified) {\n      return new Queue({ intervalCap: constants.RATE_LIMIT_VERIFIED_BOT })\n    } else if (isKnown) {\n      return new Queue({ intervalCap: constants.RATE_LIMIT_KNOWN_BOT })\n    }\n    return new Queue()\n  }\n\n  private _isUserAnonymous() {\n    return utils.isUserAnonymous(get(this, '_options.username'))\n  }\n\n  private _handleOpen() {\n    // Register for Twitch-specific capabilities.\n    this.send(`CAP REQ :${Object.values(Capabilities).join(' ')}`, { priority })\n\n    // Authenticate.\n    const { token, username } = this._options\n    this.send(`PASS ${token}`, { priority })\n    this.send(`NICK ${username}`, { priority })\n  }\n\n  private _handleMessage(messageEvent: WebSocket.MessageEvent) {\n    const rawMessage = messageEvent.data.toString()\n\n    try {\n      this._handleKeepAlive()\n\n      const messages = baseParser(rawMessage, this._options.username)\n\n      messages.forEach(message => {\n        const event = message.command || ''\n\n        this._log.debug(\n          '> %s %s',\n          event,\n          JSON.stringify({ ...message, _raw: undefined }),\n        )\n\n        // Handle authentication failure.\n        if (utils.isAuthenticationFailedMessage(message)) {\n          this.emit(ChatEvents.AUTHENTICATION_FAILED, {\n            ...message,\n            event: ChatEvents.AUTHENTICATION_FAILED,\n          })\n\n          this.disconnect()\n        } else {\n          // Handle PING/PONG.\n          if (message.command === Commands.PING) {\n            this.send('PONG :tmi.twitch.tv', { priority })\n          }\n\n          // Handle successful connections.\n          if (this._isUserAnonymous()) {\n            if (message.command === Commands.WELCOME) {\n              this.emit(ChatEvents.CONNECTED, {\n                ...message,\n                event: ChatEvents.CONNECTED,\n              })\n            }\n          } else {\n            if (message.command === Commands.GLOBAL_USER_STATE) {\n              this.emit(ChatEvents.CONNECTED, {\n                ...message,\n                event: ChatEvents.CONNECTED,\n              })\n            }\n          }\n\n          // Handle RECONNECT.\n          if (message.command === Commands.RECONNECT) {\n            this.emit(ChatEvents.RECONNECT, {\n              ...message,\n              event: ChatEvents.RECONNECT,\n            })\n          }\n        }\n\n        // Emit all messages.\n        this.emit(ChatEvents.ALL, message)\n      })\n    } catch (error) {\n      const title = 'Parsing error encountered'\n      const query = stringify({ title, body: rawMessage })\n      this._log.error(\n        'Parsing error encountered. Please create an issue: %s',\n        `https://github.com/twitch-js/twitch-js/issues/new?${query}`,\n        error,\n      )\n\n      const errorMessage = new Errors.ParseError(error, rawMessage)\n\n      this.emit(errorMessage.command, errorMessage)\n      this.emit(ChatEvents.ALL, errorMessage)\n      throw errorMessage\n    } finally {\n      const message = {\n        _raw: rawMessage,\n        timestamp: new Date(),\n      }\n\n      this.emit(ChatEvents.RAW, message)\n    }\n  }\n\n  private _handleError(messageEvent: WebSocket.ErrorEvent) {\n    const message = {\n      timestamp: new Date(),\n      event: ChatEvents.ERROR_ENCOUNTERED,\n      messageEvent,\n    }\n\n    this.emit(ChatEvents.ERROR_ENCOUNTERED, message)\n    this.emit(ChatEvents.ALL, message)\n  }\n\n  private _handleClose(messageEvent: WebSocket.CloseEvent) {\n    const message = {\n      timestamp: new Date(),\n      event: ChatEvents.DISCONNECTED,\n      messageEvent,\n    }\n\n    this.emit(ChatEvents.DISCONNECTED, message)\n    this.emit(ChatEvents.ALL, message)\n  }\n\n  private _handleKeepAlive() {\n    this._handleKeepAliveReset()\n\n    if (this.isReady()) {\n      this._pingTimeoutId = setTimeout(\n        () => this.send(Commands.PING, { priority }),\n        constants.KEEP_ALIVE_PING_TIMEOUT,\n      )\n    }\n\n    this._reconnectTimeoutId = setTimeout(\n      () => this.emit(ChatEvents.RECONNECT, {}),\n      constants.KEEP_ALIVE_RECONNECT_TIMEOUT,\n    )\n  }\n\n  private _handleKeepAliveReset() {\n    clearTimeout(this._pingTimeoutId)\n    clearTimeout(this._reconnectTimeoutId)\n    this._pingTimeoutId = undefined\n    this._reconnectTimeoutId = undefined\n  }\n}\n\nexport default Client\n","import camelCase from 'lodash/camelCase'\nimport toUpper from 'lodash/toUpper'\n\nimport { ChatCommands, KnownNoticeMessageIds, Commands } from '../../twitch'\n\nimport * as utils from '../../utils'\n\nexport const factory = (chatInstance: any) => {\n  Object.entries(ChatCommands).forEach(([key, command]) => {\n    chatInstance[camelCase(key)] = (channel: string, ...args: string[]) =>\n      chatInstance.say(channel, `/${command}`, ...args)\n  })\n}\n\nexport const resolvers = (chatInstance: any) => (\n  channel: string,\n  commandOrMessage: string,\n) => {\n  const [, command] = /^\\/(.+)/.exec(commandOrMessage) || []\n\n  const notices = Object.entries(KnownNoticeMessageIds).reduce(\n    (uppercase, [key, value]) => ({ ...uppercase, [key]: toUpper(value) }),\n    {} as Record<keyof typeof KnownNoticeMessageIds, string>,\n  )\n\n  switch (command) {\n    case ChatCommands.BAN:\n      return [\n        utils.resolveOnEvent(chatInstance, `${notices.BAN_SUCCESS}/${channel}`),\n        utils.resolveOnEvent(\n          chatInstance,\n          `${notices.ALREADY_BANNED}/${channel}`,\n        ),\n      ]\n\n    case ChatCommands.CLEAR:\n      return [\n        utils.resolveOnEvent(chatInstance, `${Commands.CLEAR_CHAT}/${channel}`),\n      ]\n\n    case ChatCommands.COLOR:\n      return [\n        utils.resolveOnEvent(\n          chatInstance,\n          `${notices.COLOR_CHANGED}/${channel}`,\n        ),\n      ]\n\n    case ChatCommands.COMMERCIAL:\n      return [\n        utils.resolveOnEvent(\n          chatInstance,\n          `${notices.COMMERCIAL_SUCCESS}/${channel}`,\n        ),\n      ]\n\n    case ChatCommands.EMOTE_ONLY:\n      return [\n        utils.resolveOnEvent(\n          chatInstance,\n          `${notices.EMOTE_ONLY_ON}/${channel}`,\n        ),\n        utils.resolveOnEvent(\n          chatInstance,\n          `${notices.ALREADY_EMOTE_ONLY_ON}/${channel}`,\n        ),\n      ]\n    case ChatCommands.EMOTE_ONLY_OFF:\n      return [\n        utils.resolveOnEvent(\n          chatInstance,\n          `${notices.EMOTE_ONLY_OFF}/${channel}`,\n        ),\n        utils.resolveOnEvent(\n          chatInstance,\n          `${notices.ALREADY_EMOTE_ONLY_OFF}/${channel}`,\n        ),\n      ]\n\n    case ChatCommands.FOLLOWERS_ONLY:\n      return [\n        utils.resolveOnEvent(\n          chatInstance,\n          `${notices.FOLLOWERS_ON_ZERO}/${channel}`,\n        ),\n        utils.resolveOnEvent(\n          chatInstance,\n          `${notices.FOLLOWERS_ON}/${channel}`,\n        ),\n      ]\n    case ChatCommands.FOLLOWERS_ONLY_OFF:\n      return [\n        utils.resolveOnEvent(\n          chatInstance,\n          `${notices.FOLLOWERS_OFF}/${channel}`,\n        ),\n      ]\n\n    case ChatCommands.HELP:\n      return [\n        utils.resolveOnEvent(\n          chatInstance,\n          `${notices.CMDS_AVAILABLE}/${channel}`,\n        ),\n      ]\n\n    case ChatCommands.HOST:\n      return [\n        utils.resolveOnEvent(chatInstance, `${notices.HOST_ON}/${channel}`),\n      ]\n\n    case ChatCommands.MARKER:\n      return [Promise.resolve()]\n\n    // case ChatCommands.ME:\n    // Use resolver for private messages.\n\n    case ChatCommands.MOD:\n      return [\n        utils.resolveOnEvent(chatInstance, `${notices.MOD_SUCCESS}/${channel}`),\n        utils.resolveOnEvent(chatInstance, `${notices.BAD_MOD_MOD}/${channel}`),\n      ]\n    case ChatCommands.MODS:\n      return [\n        utils.resolveOnEvent(chatInstance, `${notices.ROOM_MODS}/${channel}`),\n      ]\n\n    case ChatCommands.R9K:\n      return [\n        utils.resolveOnEvent(chatInstance, `${notices.R9K_ON}/${channel}`),\n        utils.resolveOnEvent(\n          chatInstance,\n          `${notices.ALREADY_R9K_ON}/${channel}`,\n        ),\n      ]\n    case ChatCommands.R9K_OFF:\n      return [\n        utils.resolveOnEvent(chatInstance, `${notices.R9K_OFF}/${channel}`),\n        utils.resolveOnEvent(\n          chatInstance,\n          `${notices.ALREADY_R9K_OFF}/${channel}`,\n        ),\n      ]\n\n    case ChatCommands.RAID:\n      return [Promise.resolve()]\n\n    case ChatCommands.SLOW:\n      return [\n        utils.resolveOnEvent(chatInstance, `${notices.SLOW_ON}/${channel}`),\n      ]\n    case ChatCommands.SLOW_OFF:\n      return [\n        utils.resolveOnEvent(chatInstance, `${notices.SLOW_OFF}/${channel}`),\n      ]\n\n    case ChatCommands.SUBSCRIBERS:\n      return [\n        utils.resolveOnEvent(chatInstance, `${notices.SUBS_ON}/${channel}`),\n        utils.resolveOnEvent(\n          chatInstance,\n          `${notices.ALREADY_SUBS_ON}/${channel}`,\n        ),\n      ]\n    case ChatCommands.SUBSCRIBERS_OFF:\n      return [\n        utils.resolveOnEvent(chatInstance, `${notices.SUBS_OFF}/${channel}`),\n        utils.resolveOnEvent(\n          chatInstance,\n          `${notices.ALREADY_SUBS_OFF}/${channel}`,\n        ),\n      ]\n\n    case ChatCommands.TIMEOUT:\n      return [\n        utils.resolveOnEvent(\n          chatInstance,\n          `${notices.TIMEOUT_SUCCESS}/${channel}`,\n        ),\n      ]\n\n    case ChatCommands.UNBAN:\n      return [\n        utils.resolveOnEvent(\n          chatInstance,\n          `${notices.UNBAN_SUCCESS}/${channel}`,\n        ),\n        utils.resolveOnEvent(\n          chatInstance,\n          `${notices.BAD_UNBAN_NO_BAN}/${channel}`,\n        ),\n      ]\n\n    case ChatCommands.UNHOST:\n      return [\n        utils.resolveOnEvent(chatInstance, `${notices.HOST_OFF}/${channel}`),\n      ]\n\n    case ChatCommands.UNMOD:\n      return [\n        utils.resolveOnEvent(chatInstance, `${notices.HOST_OFF}/${channel}`),\n      ]\n\n    case ChatCommands.UNRAID:\n      return [\n        utils.resolveOnEvent(\n          chatInstance,\n          `${notices.UNRAID_SUCCESS}/${channel}`,\n        ),\n      ]\n\n    // Resolver for private messages.\n    default:\n      return [\n        utils.resolveOnEvent(chatInstance, `${Commands.USER_STATE}/${channel}`),\n      ]\n  }\n}\n","import EventEmitter from 'eventemitter3'\n\nimport get from 'lodash/get'\nimport toLower from 'lodash/toLower'\nimport uniq from 'lodash/uniq'\n\nimport {\n  GlobalUserStateMessage,\n  UserStateMessage,\n  RoomStateMessage,\n  Events,\n  Commands,\n  Messages,\n  BaseMessage,\n} from '../twitch'\n\nimport createLogger, { Logger } from '../utils/logger'\n\nimport * as utils from '../utils'\nimport * as chatUtils from './utils'\n\nimport Client from './Client'\nimport * as Errors from './Errors'\n\nimport * as constants from './constants'\nimport * as commands from './utils/commands'\nimport * as parsers from './utils/parsers'\nimport * as sanitizers from './utils/sanitizers'\nimport * as validators from './utils/validators'\n\nimport {\n  ChatReadyStates,\n  EventTypes,\n  ChatOptions,\n  ChannelStates,\n  NoticeCompounds,\n  PrivateMessageCompounds,\n  UserNoticeCompounds,\n} from './types'\n\nexport * from './types'\n\n/**\n * Interact with Twitch chat.\n *\n * ## Connecting\n *\n * ```js\n * const token = 'cfabdegwdoklmawdzdo98xt2fo512y'\n * const username = 'ronni'\n * const { chat } = new TwitchJs({ token, username })\n *\n * chat.connect().then(globalUserState => {\n *   // Do stuff ...\n * })\n * ```\n *\n * **Note:** Connecting with a `token` and a `username` is optional.\n *\n * Once connected, `chat.userState` will contain\n * [[GlobalUserStateTags|global user state information]].\n *\n * ## Joining a channel\n *\n * ```js\n * const channel = '#dallas'\n *\n * chat.join(channel).then(channelState => {\n *   // Do stuff with channelState...\n * })\n * ```\n *\n * After joining a channel, `chat.channels[channel]` will contain\n * [[ChannelState|channel state information]].\n *\n * ## Listening for events\n *\n * ```js\n * // Listen to all events\n * chat.on('*', message => {\n *   // Do stuff with message ...\n * })\n *\n * // Listen to private messages\n * chat.on('PRIVMSG', privateMessage => {\n *   // Do stuff with privateMessage ...\n * })\n * ```\n *\n * Events are nested; for example:\n *\n * ```js\n * // Listen to subscriptions only\n * chat.on('USERNOTICE/SUBSCRIPTION', userStateMessage => {\n *   // Do stuff with userStateMessage ...\n * })\n *\n * // Listen to all user notices\n * chat.on('USERNOTICE', userStateMessage => {\n *   // Do stuff with userStateMessage ...\n * })\n * ```\n *\n * For added convenience, TwitchJS also exposes event constants.\n *\n * ```js\n * const { chat } = new TwitchJs({ token, username })\n *\n * // Listen to all user notices\n * chat.on(chat.events.USER_NOTICE, userStateMessage => {\n *   // Do stuff with userStateMessage ...\n * })\n * ```\n *\n * ## Sending messages\n *\n * To send messages, [Chat] must be initialized with a `username` and a\n * [`token`](../#authentication) with `chat_login` scope.\n *\n * All messages sent to Twitch are automatically rate-limited according to\n * [Twitch Developer documentation](https://dev.twitch.tv/docs/irc/guide/#command--message-limits).\n *\n * ### Speak in channel\n *\n * ```js\n * const channel = '#dallas'\n *\n * chat\n *   .say(channel, 'Kappa Keepo Kappa')\n *   // Optionally ...\n *   .then(userStateMessage => {\n *     // ... do stuff with userStateMessage on success ...\n *   })\n * ```\n *\n * ### Send command to channel\n *\n * All chat commands are currently supported and exposed as camel-case methods. For\n * example:\n *\n * ```js\n * const channel = '#dallas'\n *\n * // Enable followers-only for 1 week\n * chat.followersOnly(channel, '1w')\n *\n * // Ban ronni\n * chat.ban(channel, 'ronni')\n * ```\n *\n * **Note:** `Promise`-resolves for each commands are\n * [planned](https://github.com/twitch-devs/twitch-js/issues/87).\n *\n * ## Joining multiple channels\n *\n * ```js\n * const channels = ['#dallas', '#ronni']\n *\n * Promise.all(channels.map(channel => chat.join(channel))).then(channelStates => {\n *   // Listen to all messages from #dallas only\n *   chat.on('#dallas', message => {\n *     // Do stuff with message ...\n *   })\n *\n *   // Listen to private messages from #dallas and #ronni\n *   chat.on('PRIVMSG', privateMessage => {\n *     // Do stuff with privateMessage ...\n *   })\n *\n *   // Listen to private messages from #dallas only\n *   chat.on('PRIVMSG/#dallas', privateMessage => {\n *     // Do stuff with privateMessage ...\n *   })\n *\n *   // Listen to all private messages from #ronni only\n *   chat.on('PRIVMSG/#ronni', privateMessage => {\n *     // Do stuff with privateMessage ...\n *   })\n * })\n * ```\n *\n * ### Broadcasting to all channels\n *\n * ```js\n * chat\n *   .broadcast('Kappa Keepo Kappa')\n *   // Optionally ...\n *   .then(userStateMessages => {\n *     // ... do stuff with userStateMessages on success ...\n *   })\n * ```\n */\nclass Chat extends EventEmitter<EventTypes> {\n  static Commands = Commands\n\n  static Events = Events\n\n  static CompoundEvents = {\n    [Events.NOTICE]: NoticeCompounds,\n    [Events.PRIVATE_MESSAGE]: PrivateMessageCompounds,\n    [Events.USER_NOTICE]: UserNoticeCompounds,\n  }\n\n  private _options: ChatOptions\n\n  private _log: Logger\n\n  private _client: Client\n\n  private _readyState: ChatReadyStates = ChatReadyStates.NOT_READY\n\n  private _connectionAttempts = 0\n  private _connectionInProgress: Promise<GlobalUserStateMessage>\n\n  private _userState: UserStateMessage\n  private _channelState: ChannelStates = {}\n\n  private _isDisconnecting = false\n\n  /**\n   * Chat constructor.\n   */\n  constructor(maybeOptions: ChatOptions) {\n    super()\n\n    this.options = maybeOptions\n\n    // Create logger.\n    this._log = createLogger({ name: 'Chat', ...this.options.log })\n\n    // Create commands.\n    Object.assign(this, commands.factory(this))\n  }\n\n  /**\n   * Retrieves the current options\n   */\n  get options() {\n    return this._options\n  }\n\n  /**\n   * Validates the passed options before changing `_options`\n   */\n  set options(maybeOptions) {\n    this._options = validators.chatOptions(maybeOptions)\n  }\n\n  /**\n   * Connect to Twitch.\n   */\n  connect = () => {\n    this._isDisconnecting = false\n\n    if (this._connectionInProgress) {\n      return this._connectionInProgress\n    }\n\n    this._connectionInProgress = Promise.race([\n      utils.rejectAfter(\n        this.options.connectionTimeout,\n        new Errors.TimeoutError(constants.ERROR_CONNECT_TIMED_OUT),\n      ),\n      this._handleConnectionAttempt(),\n    ])\n      .then(this._handleConnectSuccess.bind(this))\n      .catch(this._handleConnectRetry.bind(this))\n\n    return this._connectionInProgress\n  }\n\n  /**\n   * Updates the client options after instantiation.\n   * To update `token` or `username`, use `reconnect()`.\n   */\n  updateOptions(options: Partial<ChatOptions>) {\n    const { token, username } = this.options\n    this.options = { ...options, token, username }\n  }\n\n  /**\n   * Send a raw message to Twitch.\n   */\n  send: Client['send'] = (message, options) =>\n    this._client.send(message, options)\n\n  /**\n   * Disconnected from Twitch.\n   */\n  disconnect = () => {\n    this._isDisconnecting = true\n    this._readyState = ChatReadyStates.DISCONNECTING\n    this._clearChannelState()\n    this._client.disconnect()\n  }\n\n  /**\n   * Reconnect to Twitch, providing new options to the client.\n   */\n  reconnect = (newOptions?: ChatOptions) => {\n    if (newOptions) {\n      this.options = { ...this.options, ...newOptions }\n    }\n\n    this._connectionInProgress = null\n    this._readyState = ChatReadyStates.RECONNECTING\n\n    const channels = this._getChannels()\n    this.disconnect()\n\n    return this.connect().then(() =>\n      Promise.all(channels.map(channel => this.join(channel))),\n    )\n  }\n\n  /**\n   * Join a channel.\n   *\n   * @example <caption>Joining #dallas</caption>\n   * const channel = '#dallas'\n   *\n   * chat.join(channel).then(channelState => {\n   *   // Do stuff with channelState...\n   * })\n   *\n   * @example <caption>Joining multiple channels</caption>\n   * const channels = ['#dallas', '#ronni']\n   *\n   * Promise.all(channels.map(channel => chat.join(channel)))\n   *   .then(channelStates => {\n   *     // Listen to all PRIVMSG\n   *     chat.on('PRIVMSG', privateMessage => {\n   *       // Do stuff with privateMessage ...\n   *     })\n   *\n   *     // Listen to PRIVMSG from #dallas ONLY\n   *     chat.on('PRIVMSG/#dallas', privateMessage => {\n   *       // Do stuff with privateMessage ...\n   *     })\n   *     // Listen to all PRIVMSG from #ronni ONLY\n   *     chat.on('PRIVMSG/#ronni', privateMessage => {\n   *       // Do stuff with privateMessage ...\n   *     })\n   *   })\n   */\n  join = (maybeChannel: string) => {\n    const channel = sanitizers.channel(maybeChannel)\n\n    const joinProfiler = this._log.profile(`Joining ${channel}`)\n\n    const connect = this.connect()\n    const roomStateEvent = utils.resolveOnEvent<RoomStateMessage>(\n      this,\n      `${Commands.ROOM_STATE}/${channel}`,\n    )\n    const userStateEvent = !chatUtils.isUserAnonymous(this.options.username)\n      ? utils.resolveOnEvent<UserStateMessage>(\n          this,\n          `${Commands.USER_STATE}/${channel}`,\n        )\n      : (Promise.resolve() as Promise<UserStateMessage | void>)\n\n    const join = Promise.all([connect, roomStateEvent, userStateEvent]).then(\n      ([, roomState, userState]) => {\n        const channelState = {\n          roomState: roomState.tags,\n          userState: userState ? userState.tags : null,\n        }\n\n        this._setChannelState(roomState.channel, channelState)\n\n        joinProfiler.done(`Joined ${channel}`)\n        return channelState\n      },\n    )\n\n    const send = this.send(`${Commands.JOIN} ${channel}`)\n\n    return send.then(() =>\n      Promise.race([\n        utils.rejectAfter(\n          this.options.joinTimeout,\n          new Errors.TimeoutError(constants.ERROR_JOIN_TIMED_OUT),\n        ),\n        join,\n      ]),\n    )\n  }\n\n  /**\n   * Depart from a channel.\n   */\n  part = (maybeChannel: string) => {\n    const channel = sanitizers.channel(maybeChannel)\n    this._log.info(`Parting ${channel}`)\n\n    this._removeChannelState(channel)\n    this.send(`${Commands.PART} ${channel}`)\n  }\n\n  /**\n   * Send a message to a channel.\n   */\n  say = (maybeChannel: string, message: string, ...messageArgs: string[]) => {\n    const channel = sanitizers.channel(maybeChannel)\n    const args = messageArgs.length ? ['', ...messageArgs].join(' ') : ''\n\n    const info = `PRIVMSG/${channel} :${message}${args}`\n\n    const isModerator = get(this, ['_channelState', channel, 'isModerator'])\n\n    // const timeout = utils.rejectAfter(\n    //   this.options.joinTimeout,\n    //   new Errors.TimeoutError(constants.ERROR_SAY_TIMED_OUT),\n    // )\n\n    const commandResolvers = commands.resolvers(this)(channel, message)\n\n    const resolvers = () => Promise.race([...commandResolvers])\n\n    return utils\n      .resolveInSequence([\n        this._isUserAuthenticated.bind(this),\n        this.send.bind(\n          this,\n          `${Commands.PRIVATE_MESSAGE} ${channel} :${message}${args}`,\n          { isModerator },\n        ),\n        resolvers,\n      ])\n      .then(resolvedEvent => {\n        this._log.info(info)\n        return resolvedEvent\n      })\n      .catch(err => {\n        this._log.error(info, err)\n        throw err\n      })\n  }\n\n  /**\n   * Whisper to another user.\n   */\n  whisper = (user: string, message: string) =>\n    utils.resolveInSequence([\n      this._isUserAuthenticated.bind(this),\n      this.send.bind(this, `${Commands.WHISPER} :/w ${user} ${message}`),\n    ])\n\n  /**\n   * Broadcast message to all connected channels.\n   */\n  broadcast = (message: string) =>\n    utils.resolveInSequence([\n      this._isUserAuthenticated.bind(this),\n      () =>\n        Promise.all(\n          this._getChannels().map(channel => this.say(channel, message)),\n        ),\n    ])\n\n  private _handleConnectionAttempt(): Promise<GlobalUserStateMessage> {\n    return new Promise((resolve, reject) => {\n      const connectProfiler = this._log.profile('Connecting ...')\n\n      // Connect ...\n      this._readyState = ChatReadyStates.CONNECTING\n\n      // Increment connection attempts.\n      this._connectionAttempts += 1\n\n      if (this._client) {\n        // Remove all listeners, just in case.\n        this._client.removeAllListeners()\n      }\n\n      // Create client and connect.\n      this._client = new Client(this.options)\n\n      // Handle messages.\n      this._client.on(Events.ALL, this._handleMessage, this)\n\n      // Handle disconnects.\n      this._client.on(Events.DISCONNECTED, this._handleDisconnect, this)\n\n      // Listen for reconnects.\n      this._client.once(Events.RECONNECT, () => this.reconnect())\n\n      // Listen for authentication failures.\n      this._client.once(Events.AUTHENTICATION_FAILED, reject)\n\n      // Once the client is connected, resolve ...\n      this._client.once(Events.CONNECTED, e => {\n        this._handleJoinsAfterConnect()\n        connectProfiler.done('Connected')\n        resolve(e)\n      })\n    })\n  }\n\n  private _handleConnectSuccess(globalUserState: GlobalUserStateMessage) {\n    this._readyState = ChatReadyStates.CONNECTED\n    this._connectionAttempts = 0\n\n    return parsers.globalUserStateMessage(globalUserState)\n  }\n\n  private async _handleJoinsAfterConnect() {\n    const channels = this._getChannels()\n    await Promise.all(channels.map(channel => this.join(channel)))\n  }\n\n  private async _handleConnectRetry(errorMessage: BaseMessage) {\n    this._connectionInProgress = null\n\n    if (this._isDisconnecting) {\n      // .disconnect() was called; do not retry to connect.\n      return Promise.resolve()\n    }\n\n    this._readyState = ChatReadyStates.CONNECTING\n\n    this._log.info('Retrying ...')\n\n    if (errorMessage.event === Events.AUTHENTICATION_FAILED) {\n      try {\n        const token = await this.options.onAuthenticationFailure()\n\n        if (token) {\n          this.options = { ...this.options, token }\n\n          await utils.resolveAfter(this.options.connectionTimeout)\n\n          return this.connect()\n        }\n      } catch (error) {\n        this._log.error('Connection failed')\n        throw new Errors.AuthenticationError(error, errorMessage)\n      }\n    }\n\n    return this.connect()\n  }\n\n  private _isUserAuthenticated() {\n    return new Promise((resolve, reject) => {\n      if (chatUtils.isUserAnonymous(this.options.username)) {\n        reject(new Error('Not authenticated'))\n      } else {\n        resolve()\n      }\n    })\n  }\n\n  private _emit(eventName: string, message: Messages) {\n    if (eventName) {\n      const events = uniq(eventName.split('/'))\n\n      const displayName =\n        get(message, 'tags.displayName') || get(message, 'username') || ''\n      const info = get(message, 'message') || ''\n      this._log.info(\n        `${events.join('/')}`,\n        `${displayName}${info ? ':' : ''}`,\n        info,\n      )\n\n      events\n        .filter(part => part !== '#')\n        .reduce((parents, part) => {\n          const eventParts = [...parents, part]\n          if (eventParts.length > 1) {\n            super.emit(part as keyof EventTypes, message)\n          }\n          super.emit(eventParts.join('/') as keyof EventTypes, message)\n          return eventParts\n        }, [])\n    }\n\n    /**\n     * All events are also emitted with this event name.\n     * @event Chat#*\n     */\n    super.emit(Events.ALL, message)\n  }\n\n  private _getChannels() {\n    return Object.keys(this._channelState)\n  }\n\n  private _getChannelState(channel) {\n    return this._channelState[channel]\n  }\n\n  private _setChannelState(channel, state) {\n    this._channelState[channel] = state\n  }\n\n  private _removeChannelState(channel) {\n    this._channelState = Object.entries(this._channelState).reduce(\n      (channelStates, [name, state]) => {\n        return name === channel\n          ? channelStates\n          : { ...channelStates, [name]: state }\n      },\n      {},\n    )\n  }\n\n  private _clearChannelState() {\n    this._channelState = {}\n  }\n\n  private _handleMessage(baseMessage) {\n    const channel = sanitizers.channel(baseMessage.channel)\n\n    const preMessage = baseMessage\n\n    let eventName = preMessage.command\n    let message = preMessage\n\n    switch (preMessage.command) {\n      case Events.JOIN: {\n        message = parsers.joinMessage(preMessage)\n        eventName = `${message.command}/${channel}`\n        break\n      }\n\n      case Events.PART: {\n        message = parsers.partMessage(preMessage)\n        eventName = `${message.command}/${channel}`\n        break\n      }\n\n      case Events.NAMES: {\n        message = parsers.namesMessage(preMessage)\n        eventName = `${message.command}/${channel}`\n        break\n      }\n\n      case Events.NAMES_END: {\n        message = parsers.namesEndMessage(preMessage)\n        eventName = `${message.command}/${channel}`\n        break\n      }\n\n      case Events.CLEAR_CHAT: {\n        message = parsers.clearChatMessage(preMessage)\n        eventName = message.event\n          ? `${message.command}/${message.event}/${channel}`\n          : `${message.command}/${channel}`\n        break\n      }\n\n      case Events.HOST_TARGET: {\n        message = parsers.hostTargetMessage(preMessage)\n        eventName = `${message.command}/${channel}`\n        break\n      }\n\n      case Events.MODE: {\n        message = parsers.modeMessage(preMessage)\n        eventName = `${message.command}/${channel}`\n\n        if (toLower(this.options.username) === toLower(message.username)) {\n          const channelState = this._getChannelState(channel)\n\n          this._setChannelState(channel, {\n            ...channelState,\n            userState: {\n              ...channelState.userState,\n              isModerator: message.isModerator,\n            },\n          })\n        }\n        break\n      }\n\n      case Events.GLOBAL_USER_STATE: {\n        message = parsers.globalUserStateMessage(preMessage)\n        this._userState = message.tags\n        break\n      }\n\n      case Events.USER_STATE: {\n        message = parsers.userStateMessage(preMessage)\n        eventName = `${message.command}/${channel}`\n\n        this._setChannelState(channel, {\n          ...this._getChannelState(channel),\n          userState: message.tags,\n        })\n        break\n      }\n\n      case Events.ROOM_STATE: {\n        message = parsers.roomStateMessage(preMessage)\n        eventName = `${message.command}/${channel}`\n\n        this._setChannelState(channel, {\n          ...this._getChannelState(channel),\n          roomState: message.roomState,\n        })\n        break\n      }\n\n      case Events.NOTICE: {\n        message = parsers.noticeMessage(preMessage)\n        eventName = `${message.command}/${message.event}/${channel}`\n        break\n      }\n\n      case Events.USER_NOTICE: {\n        message = parsers.userNoticeMessage(preMessage)\n        eventName = `${message.command}/${message.event}/${channel}`\n        break\n      }\n\n      case Events.PRIVATE_MESSAGE: {\n        message = parsers.privateMessage(preMessage)\n        eventName = message.event\n          ? `${message.command}/${message.event}/${channel}`\n          : `${message.command}/${channel}`\n        break\n      }\n\n      default: {\n        const command = chatUtils.getEventNameFromMessage(preMessage)\n        eventName = channel === '#' ? command : `${command}/${channel}`\n      }\n    }\n\n    this._emit(eventName, message)\n  }\n\n  private _handleDisconnect() {\n    this._connectionInProgress = null\n    this._readyState = ChatReadyStates.DISCONNECTED\n    this._isDisconnecting = false\n  }\n}\n\nexport default Chat\n","import { ApiVersions } from '../twitch'\n\nimport { FetchOptions } from '../utils/fetch'\nimport { LoggerOptions } from '../utils/logger'\n\nexport type ApiOptions = {\n  clientId?: string\n  token?: string\n  log?: LoggerOptions\n  onAuthenticationFailure?: () => Promise<string>\n}\n\nexport enum ApiReadyStates {\n  'NOT_READY',\n  'READY',\n  'INITIALIZED',\n}\n\nexport type ApiSettings = {\n  baseUrl: string\n  authorizationHeader: string\n}\n\nexport const Settings: Record<ApiVersions, ApiSettings> = {\n  [ApiVersions.Helix]: {\n    baseUrl: 'https://api.twitch.tv/helix',\n    authorizationHeader: 'Bearer',\n  },\n  [ApiVersions.Kraken]: {\n    baseUrl: 'https://api.twitch.tv/kraken',\n    authorizationHeader: 'OAuth',\n  },\n}\n\nexport type ApiHeaders = {\n  'Client-ID': string\n  Accept?: string\n  Authorization?: string\n}\n\ntype ApiVersionOptions = {\n  version?: ApiVersions\n}\n\nexport type ApiFetchOptions = FetchOptions & ApiVersionOptions\n","import { Response } from 'node-fetch'\n\nimport BaseError from '../BaseError'\n\nclass FetchError extends BaseError {\n  ok: Response['ok']\n  status: Response['status']\n  statusText: Response['statusText']\n  url: Response['url']\n  body: any\n\n  constructor(response: Response, body: any) {\n    super(`${response.url} ${response.statusText}`)\n\n    Object.setPrototypeOf(this, FetchError.prototype)\n\n    this.ok = false\n    this.status = response.status\n    this.statusText = response.statusText\n    this.url = response.url\n    this.body = body\n  }\n}\n\nclass AuthenticationError extends FetchError {\n  constructor(response: Response, body: any) {\n    super(response, body)\n    Object.setPrototypeOf(this, AuthenticationError.prototype)\n  }\n}\n\nexport { BaseError, FetchError, AuthenticationError }\n","import camelcaseKeys from 'camelcase-keys'\nimport { Response } from 'node-fetch'\n\nimport * as Errors from './Errors'\n\nconst parser = async <T>(response: Response): Promise<T> => {\n  const json = await response.json()\n\n  if (!response.ok) {\n    const ErrorClass =\n      response.status === 401 ? Errors.AuthenticationError : Errors.FetchError\n\n    throw new ErrorClass(response, json)\n  }\n\n  return (camelcaseKeys(json, { deep: true }) as unknown) as T\n}\n\nexport default parser\n","import includes from 'lodash/includes'\nimport toLower from 'lodash/toLower'\nimport toUpper from 'lodash/toUpper'\n\nimport { ApiRootResponse, ApiVersions } from '../twitch'\n\nimport createLogger, { Logger } from '../utils/logger'\n\nimport fetchUtil from '../utils/fetch'\nimport * as Errors from '../utils/fetch/Errors'\nimport * as validators from './utils/validators'\n\nimport {\n  ApiOptions,\n  ApiReadyStates,\n  ApiFetchOptions,\n  ApiHeaders,\n  Settings,\n} from './types'\nimport invariant from 'invariant'\nimport isEmpty from 'lodash/isEmpty'\n\nexport * from './types'\n\n/**\n * Make requests to Twitch API.\n *\n * ## Initializing\n *\n * ```js\n * // With a token ...\n * const token = 'cfabdegwdoklmawdzdo98xt2fo512y'\n * const { api } = new TwitchJs({ token })\n *\n * // ... or with a client ID ...\n * const clientId = 'uo6dggojyb8d6soh92zknwmi5ej1q2'\n * const { api } = new TwitchJs({ clientId })\n * ```\n *\n * **Note:** The recommended way to initialize the API client is with a token.\n *\n * ## Making requests\n *\n * By default, the API client makes requests to the\n * [Helix API](https://dev.twitch.tv/docs/api), and exposes [[Api.get]],\n * [[Api.post]] and [[Api.put]] methods. Query string parameters and body\n * parameters are provided via `options.search` and `options.body` properties,\n * respectively.\n *\n * To make requests to the [Kraken/v5 API](https://dev.twitch.tv/docs/v5), use\n * `options.version = 'kraken'`\n *\n * ### Examples\n *\n * #### Get bits leaderboard\n * ```js\n * api\n *   .get('bits/leaderboard', { search: { user_id: '44322889' } })\n *   .then(response => {\n *     // Do stuff with response ...\n *   })\n * ```\n *\n * #### Get the latest Overwatch live streams\n * ```\n * api\n *   .get('streams', { version: 'kraken', search: { game: 'Overwatch' } })\n *   .then(response => {\n *     // Do stuff with response ...\n *   })\n * ```\n *\n * #### Start a channel commercial\n * ```\n * const channelId = '44322889'\n * api\n *   .post(`channels/${channelId}/commercial`, {\n *     version: 'kraken',\n *     body: { length: 30 },\n *   })\n *   .then(response => {\n *     // Do stuff with response ...\n *   })\n * ```\n */\n\nclass Api {\n  private _options: ApiOptions\n  private _log: Logger\n\n  private _readyState: ApiReadyStates = ApiReadyStates.READY\n\n  private _status: ApiRootResponse\n\n  constructor(maybeOptions: ApiOptions = {}) {\n    this.options = maybeOptions\n\n    this._log = createLogger({ name: 'Api', ...this.options.log })\n  }\n\n  set options(maybeOptions) {\n    this._options = validators.apiOptions(maybeOptions)\n  }\n\n  get options() {\n    return this._options\n  }\n\n  get readyState() {\n    return this._readyState\n  }\n\n  get status() {\n    return this._status\n  }\n\n  /**\n   * New client options. To update `token` or `clientId`, use [**api.initialize()**]{@link Api#initialize}.\n   */\n  updateOptions(options: Partial<ApiOptions>) {\n    const { clientId, token } = this.options\n    this.options = { ...options, clientId, token }\n  }\n\n  /**\n   * Initialize API client and retrieve status.\n   * @see https://dev.twitch.tv/docs/v5/#root-url\n   */\n  async initialize(newOptions?: Partial<ApiOptions>) {\n    if (newOptions) {\n      this.options = { ...this.options, ...newOptions }\n    }\n\n    if (!newOptions && this.readyState === 2) {\n      return Promise.resolve()\n    }\n\n    const statusResponse = await this.get<ApiRootResponse>('', {\n      version: ApiVersions.Kraken,\n    })\n\n    this._readyState = ApiReadyStates.INITIALIZED\n    this._status = statusResponse\n\n    return statusResponse\n  }\n\n  /**\n   * Check if current credentials include `scope`.\n   * @see https://dev.twitch.tv/docs/authentication/#twitch-api-v5\n   */\n  hasScope(\n    /** Scope to check */\n    scope: string,\n  ): Promise<boolean> {\n    return new Promise((resolve, reject) => {\n      if (this.readyState !== 2 || !this.status) {\n        return reject(false)\n      }\n\n      return includes(this.status.token.authorization.scopes, scope)\n        ? resolve(true)\n        : reject(false)\n    })\n  }\n\n  /**\n   * GET endpoint.\n   *\n   * @example <caption>Get Live Overwatch Streams (Kraken)</caption>\n   * ```\n   * api.get('streams', { version: 'kraken', search: { game: 'Overwatch' } })\n   *   .then(response => {\n   *     // Do stuff with response ...\n   *   })\n   * ```\n   *\n   * @example <caption>Get user follows (Helix)</caption>\n   * ```\n   * api.get('users/follows', { search: { to_id: '23161357' } })\n   *   .then(response => {\n   *     // Do stuff with response ...\n   *   })\n   * ```\n   */\n  get<T = any>(endpoint = '', options?: ApiFetchOptions) {\n    return this._handleFetch<T>(endpoint, options)\n  }\n\n  /**\n   * POST endpoint.\n   */\n  post<T = any>(endpoint: string, options?: ApiFetchOptions) {\n    return this._handleFetch<T>(endpoint, { ...options, method: 'post' })\n  }\n\n  /**\n   * PUT endpoint.\n   */\n  put<T = any>(endpoint: string, options?: ApiFetchOptions) {\n    return this._handleFetch<T>(endpoint, { ...options, method: 'put' })\n  }\n\n  private _isVersionHelix(version: ApiVersions) {\n    return toLower(version) === ApiVersions.Helix\n  }\n\n  private _getBaseUrl(version: ApiVersions) {\n    return Settings[version].baseUrl\n  }\n\n  private _getHeaders(version: ApiVersions): ApiHeaders {\n    const { clientId, token } = this.options\n\n    const isHelix = this._isVersionHelix(version)\n\n    invariant(\n      isHelix ? !(isEmpty(clientId) && isEmpty(token)) : true,\n      '[twitch-js/Api] To call a Helix endpoint, a `clientId` or `token` must be provided',\n    )\n\n    const headers = isHelix\n      ? { 'Client-ID': clientId }\n      : { Accept: 'application/vnd.twitchtv.v5+json', 'Client-ID': clientId }\n\n    if (token) {\n      const authorizationHeader = Settings[version].authorizationHeader\n      const authorization = `${authorizationHeader} ${token}`\n\n      return { ...headers, Authorization: authorization }\n    }\n\n    return headers\n  }\n\n  private async _handleFetch<T = any>(\n    maybeUrl = '',\n    options: ApiFetchOptions = {},\n  ) {\n    const { version = ApiVersions.Helix, ...fetchOptions } = options\n\n    const baseUrl = this._getBaseUrl(version)\n\n    const url = `${baseUrl}/${maybeUrl}`\n\n    const message = `${toUpper(fetchOptions.method) || 'GET'} ${url}`\n\n    const fetchProfiler = this._log.profile()\n\n    const performRequest = () =>\n      fetchUtil<T>(url, {\n        ...fetchOptions,\n        headers: {\n          ...fetchOptions.headers,\n          ...this._getHeaders(version),\n        },\n      })\n\n    try {\n      return await performRequest()\n    } catch (error) {\n      if (error instanceof Errors.AuthenticationError) {\n        const token = await this.options.onAuthenticationFailure()\n\n        if (token) {\n          await this.initialize({ token })\n          this._log.info(`${message} ... re-initializing with new token`)\n        }\n\n        this._log.info(`${message} ... retrying`)\n\n        return await performRequest()\n      }\n      throw new Errors.FetchError(error, message)\n    } finally {\n      fetchProfiler.done(message)\n    }\n  }\n}\n\nexport default Api\n","import invariant from 'invariant'\n\nimport conformsTo from 'lodash/conformsTo'\nimport defaults from 'lodash/defaults'\nimport isFunction from 'lodash/isFunction'\nimport isString from 'lodash/isString'\nimport isUndefined from 'lodash/isUndefined'\n\nimport { ApiOptions } from '../types'\n\nexport const apiOptions = (maybeOptions: any): ApiOptions | never => {\n  const shape = {\n    clientId: (token: unknown) => isUndefined(token) || isString(token),\n    token: (token: unknown) => isUndefined(token) || isString(token),\n    onAuthenticationFailure: isFunction,\n  }\n\n  const options = defaults<ApiOptions, ApiOptions>(\n    { ...maybeOptions },\n    {\n      clientId: undefined,\n      token: undefined,\n      onAuthenticationFailure: () => new Promise((_, reject) => reject()),\n    },\n  )\n\n  invariant(\n    conformsTo(options, shape),\n    '[twitch-js/Api] options: Expected valid options',\n  )\n\n  return options as ApiOptions\n}\n","import fetch, { RequestInit, RequestInfo } from 'node-fetch'\nimport FormData from 'form-data'\nimport { stringify, IStringifyOptions } from 'qs'\n\nimport parser from './parser'\n\ntype SearchOptions = {\n  /** Any query parameters you want to add to your request. */\n  search?: { [key: string]: any }\n}\n\nexport type FetchOptions = RequestInit & SearchOptions\n\n/**\n * Fetches URL\n */\nconst fetchUtil = async <T = any>(\n  url: RequestInfo,\n  options: FetchOptions = {},\n  qsOptions?: IStringifyOptions,\n) => {\n  const isBodyJson =\n    options.body &&\n    !(options.body instanceof FormData) &&\n    typeof options.body === 'object'\n\n  const body = isBodyJson ? JSON.stringify(options.body) : options.body\n\n  const headers = isBodyJson\n    ? { ...options.headers, 'Content-Type': 'application/json' }\n    : options.headers\n\n  const search =\n    typeof options.search === 'object'\n      ? `?${stringify(options.search, qsOptions)}`\n      : ''\n\n  const fetchOptions = body\n    ? {\n        ...options,\n        method: options.method || 'get',\n        headers,\n        body,\n      }\n    : {\n        ...options,\n        method: options.method || 'get',\n        headers,\n      }\n\n  const response = await fetch(`${url}${search}`, fetchOptions)\n\n  return parser<T>(response)\n}\n\nexport default fetchUtil\n","import Chat, * as ChatTypes from './Chat'\nimport Api, * as ApiTypes from './Api'\n\nimport { LoggerOptions } from './utils/logger'\n\nexport { Chat, ChatTypes }\nexport { Api, ApiTypes }\nexport * from './twitch'\n\ntype BaseTwitchJsOptions = {\n  clientId?: string\n  token?: string\n  username?: string\n  log?: LoggerOptions\n  onAuthenticationFailure?: () => Promise<string>\n}\n\ntype IndividualClassOptions = {\n  chat?: ChatTypes.ChatOptions\n  api?: ApiTypes.ApiOptions\n}\n\nexport type TwitchJsOptions = BaseTwitchJsOptions & IndividualClassOptions\n\n/**\n * Interact with chat and make requests to Twitch API.\n *\n * ## Initializing\n * ```\n * const token = 'cfabdegwdoklmawdzdo98xt2fo512y'\n * const username = 'ronni'\n * const twitchJs = new TwitchJs({ token, username })\n *\n * twitchJs.chat.connect().then(globalUserState => {\n *   // Do stuff ...\n * })\n *\n * twitchJs.api.get('channel').then(response => {\n *   // Do stuff ...\n * })\n * ```\n */\n\nclass TwitchJs {\n  chat: Chat\n  api: Api\n\n  static Chat = Chat\n  static Api = Api\n\n  constructor(options: TwitchJsOptions) {\n    const {\n      token,\n      username,\n      clientId,\n      log,\n      onAuthenticationFailure,\n      chat,\n      api,\n    } = options\n\n    this.chat = new Chat({\n      log,\n      ...chat,\n      token,\n      username,\n      onAuthenticationFailure,\n    })\n\n    this.api = new Api({\n      log,\n      ...api,\n      token,\n      clientId,\n      onAuthenticationFailure,\n    })\n  }\n\n  /**\n   * Update client options.\n   */\n  updateOptions(options: IndividualClassOptions) {\n    const { chat, api } = options\n\n    if (chat) {\n      this.chat.updateOptions(chat)\n    }\n\n    if (api) {\n      this.api.updateOptions(api)\n    }\n  }\n}\n\nexport default TwitchJs\n"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","ApiVersions","Capabilities","MembershipCommands","TagCommands","OtherCommands","BaseCommands","Commands","ChatEvents","ChatCommands","KnownNoticeMessageIds","__assign","assign","t","s","i","n","arguments","length","call","apply","__rest","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","rejected","result","done","then","__generator","body","f","y","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","v","op","TypeError","pop","push","__spreadArrays","il","r","k","a","j","jl","PrivateMessageEvents","KnownUserNoticeMessageIds","NoticeEvents","keys","reduce","events","event","NOTICE","BooleanBadges","NumberBadges","UserNoticeEvents","USER_NOTICE","Events","ChatReadyStates","NoticeCompounds","PrivateMessageCompounds","UserNoticeCompounds","createLogger","options","name","other","scope","concat","join","logger","pino","prettyPrint","level","profile","startMessage","now","Date","info","endMessage","error","message","resolveOnEvent","emitter","eventName","once","resolveInSequence","tasks","task","rejectAfter","ms","setTimeout","ERROR_CONNECT_TIMED_OUT","ERROR_JOIN_TIMED_OUT","MESSAGE_PARAMETER_PREFIX_RE","RegExp","PRIVATE_MESSAGE_HOSTED_RE","ANONYMOUS_USERNAME_RE","isAuthenticationFailedMessage","command","channel","isUserAnonymous","constants.ANONYMOUS_USERNAME_RE","test","_a","fn","_b","priority","_this","_q","add","PQueue","intervalCap","interval","carryoverConcurrencyCount","concurrency","generalString","maybeMessage","replace","undefined","generalNumber","maybeNumber","number","parseInt","isFinite","generalBoolean","maybeBoolean","generalTimestamp","maybeTimestamp","timestamp","toString","roomState","roomStateTags","entries","tags","followersOnlyAsNumber","tag","helpers.generalString","helpers.generalNumber","helpers.generalBoolean","userState","badges","maybeBadges","split","parsed","badge","_d","rawKey","key","camelCase","bits","color","displayName","emotes","maybeEmotes","emoteTag","emoteIndices","id","indices","map","index","start","end","emoteSets","maybeEmoteSets","userType","maybeUserType","username","toLower","globalUserState","userNotice","base","rawMessages","messages","rawMessage","_c","user","host","_e","String","messageTags","isEmpty","camelcaseKeys","messageUsername","_i","maybeUsernames","maybeUsername","helpers.username","login","_raw","helpers.generalTimestamp","isSelf","globalUserStateMessage","baseMessage","GLOBAL_USER_STATE","tagParsers.globalUserState","userStateMessage","USER_STATE","tagParsers.userState","userNoticeMessage","tagParsers.userNotice","systemMsg","systemMessage","parameters","param","tagParsers.userNoticeMessageParameters","msgId","ANON_GIFT_PAID_UPGRADE","GIFT_PAID_UPGRADE","RAID","RESUBSCRIPTION","RITUAL","SUBSCRIPTION_GIFT_COMMUNITY","SUBSCRIPTION_GIFT","SUBSCRIPTION","toUpper","startsWith","token","random","clientOptions","maybeOptions","shape","isString","server","port","ssl","isBoolean","isKnown","isVerified","defaults","sanitizers.username","sanitizers.token","invariant","conformsTo","_super","BaseError","Error","captureStackTrace","errorMessage","ChatError","AuthenticationError","ParseError","PARSE_ERROR_ENCOUNTERED","JoinError","TimeoutError","get","isModerator","_ws","send","bind","_moderatorQueue","_queue","_log","debug","_handleKeepAliveReset","close","_options","validators.clientOptions","log","protocol","WebSocket","onopen","_handleOpen","onmessage","_handleMessage","onerror","_handleError","onclose","_handleClose","_createQueue","Client","Queue","utils.isUserAnonymous","values","messageEvent","data","_handleKeepAlive","baseParser","forEach","JSON","stringify","utils.isAuthenticationFailedMessage","emit","AUTHENTICATION_FAILED","disconnect","PING","_isUserAnonymous","WELCOME","CONNECTED","RECONNECT","ALL","query","title","Errors.ParseError","RAW","ERROR_ENCOUNTERED","DISCONNECTED","isReady","_pingTimeoutId","_reconnectTimeoutId","clearTimeout","EventEmitter","factory","chatInstance","args","say","resolvers","commandOrMessage","notices","uppercase","BAN","utils.resolveOnEvent","BAN_SUCCESS","ALREADY_BANNED","CLEAR","CLEAR_CHAT","COLOR","COLOR_CHANGED","COMMERCIAL","COMMERCIAL_SUCCESS","EMOTE_ONLY","EMOTE_ONLY_ON","ALREADY_EMOTE_ONLY_ON","EMOTE_ONLY_OFF","ALREADY_EMOTE_ONLY_OFF","FOLLOWERS_ONLY","FOLLOWERS_ON_ZERO","FOLLOWERS_ON","FOLLOWERS_ONLY_OFF","FOLLOWERS_OFF","HELP","CMDS_AVAILABLE","HOST","HOST_ON","MARKER","MOD","MOD_SUCCESS","BAD_MOD_MOD","MODS","ROOM_MODS","R9K","R9K_ON","ALREADY_R9K_ON","R9K_OFF","ALREADY_R9K_OFF","SLOW","SLOW_ON","SLOW_OFF","SUBSCRIBERS","SUBS_ON","ALREADY_SUBS_ON","SUBSCRIBERS_OFF","SUBS_OFF","ALREADY_SUBS_OFF","TIMEOUT","TIMEOUT_SUCCESS","UNBAN","UNBAN_SUCCESS","BAD_UNBAN_NO_BAN","UNHOST","UNMOD","HOST_OFF","UNRAID","UNRAID_SUCCESS","ApiReadyStates","NOT_READY","_isDisconnecting","_connectionInProgress","race","utils.rejectAfter","connectionTimeout","Errors.TimeoutError","constants.ERROR_CONNECT_TIMED_OUT","_handleConnectionAttempt","_handleConnectSuccess","catch","_handleConnectRetry","_client","_readyState","DISCONNECTING","_clearChannelState","newOptions","RECONNECTING","channels","_getChannels","connect","all","maybeChannel","sanitizers.channel","joinProfiler","roomStateEvent","ROOM_STATE","userStateEvent","chatUtils.isUserAnonymous","channelState","_setChannelState","JOIN","joinTimeout","constants.ERROR_JOIN_TIMED_OUT","_removeChannelState","PART","messageArgs","commandResolvers","commands.resolvers","utils\n                .resolveInSequence","_isUserAuthenticated","PRIVATE_MESSAGE","resolvedEvent","err","utils.resolveInSequence","WHISPER","commands.factory","Chat","isNil","onAuthenticationFailure","isFunction","validators.chatOptions","connectProfiler","CONNECTING","_connectionAttempts","removeAllListeners","on","_handleDisconnect","reconnect","_handleJoinsAfterConnect","parsers.globalUserStateMessage","Errors.AuthenticationError","error_1","uniq","filter","part","parents","eventParts","_channelState","state","channelStates","preMessage","parsers.joinMessage","parsers.partMessage","NAMES","namesV","usernames","parsers.namesMessage","NAMES_END","parsers.namesEndMessage","banReason","banDuration","USER_BANNED","parsers.clearChatMessage","HOST_TARGET","numberOfViewers","isStopped","toNumber","parsers.hostTargetMessage","MODE","mode","baseModeMessage","MOD_GAINED","MOD_LOST","parsers.modeMessage","_getChannelState","_userState","parsers.userStateMessage","tagParsers.roomState","parsers.roomStateMessage","baseTags","mods","parsers.noticeMessage","parsers.userNoticeMessage","gt","CHEER","isHostingPrivateMessage","isAuto","HOSTED_AUTO","HOSTED_WITH_VIEWERS","HOSTED_WITHOUT_VIEWERS","parsers.privateMessage","chatUtils.getEventNameFromMessage","_emit","response","url","statusText","FetchError","ok","status","parser","json","Errors.FetchError","deep","Settings","Helix","baseUrl","authorizationHeader","Kraken","READY","Api","clientId","isUndefined","validators.apiOptions","_status","readyState","version","statusResponse","INITIALIZED","includes","authorization","scopes","endpoint","_handleFetch","method","isHelix","_isVersionHelix","headers","Client-ID","Accept","Authorization","maybeUrl","fetchOptions","_getBaseUrl","fetchProfiler","performRequest","qsOptions","isBodyJson","FormData","Content-Type","search","fetch","fetchUtil","_getHeaders","initialize","chat","api","TwitchJs","updateOptions"],"mappings":"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CAAYA,IAAAA,OASZ,SAAYC,GACVA,gBACAA,cACAA,cACAA,yBAJF,CAAYA,IAAAA,OAUZ,SAAYC,GACVA,yBACAA,2BACAA,kBACAA,wBACAA,yBACAA,2BACAA,yBAPF,CAAYA,IAAAA,OAUZ,SAAYC,GACVA,gBAEAA,cACAA,cACAA,wBAEAA,yBAEAA,cACAA,cACAA,cACAA,cACAA,kBAEAA,yBACAA,sCACAA,2BACAA,kBACAA,4BACAA,yBACAA,2BACAA,yBAtBF,CAAYA,IAAAA,OAyBZ,SAAYC,GACVA,YAEAA,UACAA,wBACAA,8BACAA,wBACAA,gDACAA,wCACAA,oDAEAA,kDACAA,wCACAA,cACAA,kCACAA,kBACAA,8BACAA,wCACAA,4DAEAA,wBACAA,0BACAA,sBAEAA,4BAEAA,gBAEAA,oBACAA,sBAEAA,kBACAA,kDACAA,4CACAA,4BAlCF,CAAYA,IAAAA,OAwCZ,SAAYC,GACVA,YACAA,gBACAA,gBACAA,0BAEAA,yBACAA,gCACAA,6BACAA,oCACAA,cACAA,cACAA,kBACAA,UACAA,YACAA,cAEAA,gBACAA,uBACAA,cACAA,cACAA,qBACAA,4BACAA,mCACAA,oBACAA,gBACAA,kBACAA,gBACAA,kBA5BF,CAAYA,IAAAA,OAgCZ,SAAYC,GACVA,kCACAA,kDACAA,gDACAA,oCACAA,kCACAA,sCACAA,oCACAA,sCACAA,4BACAA,4BACAA,sCACAA,gCACAA,kCACAA,0CACAA,kCACAA,gCACAA,gCACAA,8BACAA,wCACAA,sBACAA,oBACAA,oCACAA,gDACAA,4BACAA,oBACAA,kBACAA,wBACAA,sBACAA,oBACAA,sBACAA,oBACAA,oCACAA,gCACAA,kCACAA,sCAnCF,CAAYA,IAAAA,WAgDA2D,EAUAC,EApBCC,EAAelF,OAAOmF,KAAK9D,GAAuB+D,QAC7D,SAACC,EAAQC,SAAU,cACdD,WACFC,GAAQA,IACLpE,EAASqE,WAAUD,GAAUA,QAEnC,KAIF,SAAYN,GACVA,gBACAA,kDACAA,4CACAA,4BAJF,CAAYA,IAAAA,OAUZ,SAAYC,GACVA,+CACAA,sCACAA,cAC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"}