"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const errors_1 = require("./errors");
const helpers_1 = require("./helpers");
/**
 * Formats message tags.
 * @param input the message tags
 * @return the formatted message tags.
 */
function formatTags(input) {
    if (typeof input === "string") {
        return input;
    }
    const tagPairs = Object.entries(input);
    const tagPairsLength = tagPairs.length;
    let output = "";
    for (let i = 0; i < tagPairsLength; i += 1) {
        const [key, value] = tagPairs[i];
        output += key;
        if (typeof value === "string") {
            output += `=${helpers_1.escapeString(value)}`;
        }
        if (i < tagPairsLength - 1) {
            output += ";";
        }
    }
    return output;
}
exports.formatTags = formatTags;
/**
 * Formats a message prefix.
 * @throws {FormatError}
 * @param input the message prefix
 * @return the formatted message prefix.
 */
function formatPrefix(input) {
    if (typeof input === "string") {
        return input;
    }
    if (input.name) {
        let output = input.name;
        if (input.host) {
            if (input.user) {
                output += `!${input.user}`;
            }
            output += `@${input.host}`;
        }
        return output;
    }
    throw new errors_1.FormatError("Invalid Prefix");
}
exports.formatPrefix = formatPrefix;
/**
 * Formats a message.
 * @throws {FormatError}
 * @param input the message
 * @return the formatted message.
 */
function format(input) {
    if (typeof input === "string") {
        return input;
    }
    if (!input || !input.command) {
        throw new errors_1.FormatError("Invalid Message");
    }
    let middle;
    let trailing;
    let output = "";
    if (input.tags && Object.keys(input.tags).length > 0) {
        output += `@${formatTags(input.tags)}`;
    }
    if (input.prefix && Object.keys(input.prefix).length > 0) {
        if (output) {
            output += " ";
        }
        output += `:${formatPrefix(input.prefix)}`;
    }
    if (output) {
        output += " ";
    }
    output += input.command;
    if ("params" in input) {
        const last = input.params[input.params.length - 1];
        if (last && helpers_1.shouldEscapeString(last)) {
            middle = input.params.slice(0, -1);
            trailing = last;
        }
        else {
            middle = input.params;
        }
    }
    if ("middle" in input) {
        middle = input.middle;
    }
    if ("trailing" in input) {
        trailing = input.trailing;
    }
    if (middle) {
        for (let i = 0; i < middle.length; i += 1) {
            output += ` ${helpers_1.escapeString(middle[i])}`;
        }
    }
    if (trailing) {
        output += ` :${trailing}`;
    }
    return output;
}
exports.format = format;
//# sourceMappingURL=format.js.map